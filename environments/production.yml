name: production
slug: prod
state: active
description: >-
  Primary public environment exposed to customers via blackroad.io. Static
  assets publish through GitHub Pages while the API gateway deploys via the
  `BlackRoad • Deploy` workflow.
contacts:
  reviewers:
    - blackboxprogramming
  slack: "#eng"
domains:
  marketing: https://blackroad.io
  canonical: https://www.blackroad.io
  api: https://api.blackroad.io
  status: https://status.blackroad.io
infrastructure:
  cloud: aws
  region: us-west-2
  terraform:
    root: br-infra-iac/envs/prod
    backend:
      bucket: br-tfstate-<unique>
      key: prod/terraform.tfstate
      region: us-west-2
      lock_table: br-terraform-lock
    modules:
      - modules/network
      - modules/ecs-cluster
      - modules/ecr
      - modules/rds-postgres
    outputs:
      - ecs_cluster
      - private_subnets
      - db_endpoint
    repositories:
      - br-api-gateway
      - br-products-site
automation:
  workflows:
    - name: BlackRoad • Deploy
      file: .github/workflows/blackroad-deploy.yml
      triggers:
        - push (main)
        - workflow_dispatch
      summary: >-
        Builds the SPA, packages the API, triggers the deploy webhook, verifies
        health, and posts Slack status updates.
      secrets:
        - BR_DEPLOY_SECRET
        - BR_DEPLOY_URL
        - CF_ZONE_ID
        - CF_API_TOKEN
        - SLACK_WEBHOOK_URL
    - name: Fly.io deploy (reusable)
      file: .github/workflows/reusable-fly-deploy.yml
      triggers:
        - workflow_call
      summary: >-
        Provides a shared Fly.io deploy harness so edge and bridge services can
        push fresh images or configs using the same release guardrails.
      secrets:
        - FLY_API_TOKEN
    - name: AWS ECS deploy (reusable)
      file: .github/workflows/reusable-aws-ecs-deploy.yml
      triggers:
        - workflow_call
      summary: >-
        Registers a new task definition revision and forces an ECS deployment
        for production services when invoked by release workflows.
      secrets:
        - AWS_PROD_DEPLOY_ROLE_ARN
        - AWS_PROD_EXTERNAL_ID
    - name: deploy-canary
      file: .github/workflows/deploy-canary.yml
      triggers:
        - push (main)
        - workflow_dispatch (canary percent input)
      summary: >-
        Builds a fresh container image, pushes to ECR, updates the ECS service,
        and shifts a configurable percentage of traffic through the green target
        group while watching CloudWatch metrics for regression.
      secrets:
        - AWS_ROLE_TO_ASSUME
      variables:
        - AWS_REGION
        - ECR_REPO
        - ECS_CLUSTER
        - ECS_SERVICE
        - TG_BLUE_ARN
        - TG_GREEN_ARN
        - HTTPS_LISTENER_ARN
        - APP_URL
        - ALB_ARN_SUFFIX
    - name: deploy-canary-ladder
      file: .github/workflows/deploy-canary-ladder.yml
      triggers:
        - workflow_dispatch (steps + soak configuration)
      summary: >-
        Automates a progressive promotion through multiple canary percentages,
        running health and CloudWatch checks at each step and rolling back to
        blue on failure.
      secrets:
        - AWS_ROLE_TO_ASSUME
      variables:
        - AWS_REGION
        - ECR_REPO
        - ECS_CLUSTER
        - ECS_SERVICE
        - TG_BLUE_ARN
        - TG_GREEN_ARN
        - HTTPS_LISTENER_ARN
        - APP_URL
        - ALB_ARN_SUFFIX
        - API_URL
    - name: Deploy & Self-Heal
      file: .github/workflows/deploy-self-heal.yml
      triggers:
        - push (main)
      summary: >-
        Rsyncs the repo to long-lived hosts, runs the legacy deploy script, and
        executes the self-heal routine that can roll back via git or Docker when
        the health probes fail.
      secrets:
        - BR_HOST
        - BR_USER
        - BR_SSH_KEY
      variables:
        - optional HEALTH_ENDPOINTS list
        - ROLLBACK_STRATEGY
        - ROLLBACK_REF
deployments:
  - service: marketing-site
    type: static-site
    provider: github-pages
    repo: blackboxprogramming/blackroad-prism-console
    workflow: .github/workflows/blackroad-deploy.yml
    artifacts:
      path: sites/blackroad
    domain: https://blackroad.io
    health_check: https://blackroad.io/healthz
  - service: api-gateway
    type: container-service
    provider: aws-ecs-fargate
    terraform_directory: br-infra-iac/envs/prod
    module: modules/ecs-service-alb
    terraform_backend:
      bucket: br-tfstate-<unique>
      key: prod/terraform.tfstate
      region: us-west-2
      lock_table: br-terraform-lock
    state: planned
    notes: >-
      Production wiring follows the dev module that provisions api.blackroad.io
      behind an ALB-backed Fargate service.
    health_check: https://api.blackroad.io/health
    workflow: .github/workflows/blackroad-deploy.yml
change_management:
  approvals:
    - .github/workflows/change-approve.yml
  policy_gates:
    - name: cab-approval
      description: Change Advisory Board approval must clear via the change-approve workflow before promoting builds.
      workflow: .github/workflows/change-approve.yml
    - name: release-runbook
      description: Execute the infra release runbook so rollbacks and notifications stay coordinated across teams.
      runbook: runbooks/examples/infra_release_policy.yaml
  runbooks:
    - README-DEPLOY.md
    - README-OPS.md
    - runbooks/examples/infra_release_policy.yaml
    - runbooks/examples/infra_release_rollback.yaml
    - docs/ops/rollback-forward.md
observability:
  health_checks:
    - name: frontend
      url: https://blackroad.io/healthz
    - name: api
      url: https://api.blackroad.io/health
  scripts:
    - scripts/blackroad-autoheal.sh
branch: main
description: >-
  Primary customer-facing deployment served from blackroad.io with the marketing
  surface, application, and API footprint.
urls:
  marketing: https://blackroad.io
  app: https://app.blackroad.io
  api: https://api.blackroad.io
  status: https://status.blackroad.io
reviewers:
  - blackboxprogramming
  - platform-ops
  - security-reviewers
deploy_targets:
  - surface: marketing-site
    provider: cloudflare_pages
    artifact_path: sites/blackroad
    workflow: .github/workflows/pages-landing.yml
    notes: >-
      BuildBlackRoadSiteAgent builds the static site and WebsiteBot deploys it to
      Cloudflare Pages.
  - surface: customer-app
    provider: fly_io
    app: blackroad-app
    release_channel: stable
    regions: [iad, ord]
    workflow: .github/workflows/canary.yml
    secrets:
      - FLY_API_TOKEN
  - surface: api
    provider: aws_ecs
    cluster: blackroad-prod
    service: prism-console-api
    workflow: .github/workflows/_backup_132_deploy.yml
    container:
      port: 4010
      healthcheck: /api/llm/health
    load_balancer:
      host: api.blackroad.io
      https_listener_secret: AWS_PROD_HTTPS_LISTENER_ARN
    iam:
      deploy_role_secret: AWS_PROD_DEPLOY_ROLE
observability:
  grafana: https://blackroad.io/monitoring
  alerting_channel: https://blackroad.io/monitoring
  healthchecks:
    - https://blackroad.io/healthz
    - https://blackroad.io/api/llm/health
runbooks:
  - DEPLOYMENT.md
  - RUNBOOK.md
  - ROLLBACK.md
approvals:
  change_windows:
    - name: weekly_release
      schedule: Tuesday 02:00-05:00 UTC
  required_roles:
    - platform
    - security
backups:
  schedule: "0 3 * * *"
  script: /usr/local/bin/blackroad-backup-sqlite.sh
  location: /var/backups/blackroad/sqlite/
notes:
  - >-
    Use the autopal dual-approval environment access workflow before making
    production changes.
status: live
description: >-
  Customer-facing BlackRoad Prism Console footprint.
branch: main
urls:
  primary: https://blackroad.io
  health: https://blackroad.io/healthz
  status: https://status.blackroad.io
governance:
  approvals_required: true
  reviewers:
    - handle: blackboxprogramming
  contacts:
    owner: amundsonalexa@gmail.com
    slack_channels:
      - channel: ops-monitor
        purpose: Track lead time, deployment frequency, change fail rate, and MTTR once instrumentation is wired up.
runbooks:
  release: DEPLOYMENT.md
  rollback: DEPLOYMENT.md#rollback
  operations: RUNBOOK.md
deployment:
  branch_policy:
    auto_deploy_from: main
  workflows:
    - .github/workflows/blackroad-deploy.yml
    - .github/workflows/release.yml
observability:
  dashboards:
    - deploy/k8s/monitoring.yaml
notes:
  - Next initiative: hook CI/CD outputs into Fly.io and AWS ECS targets via reusable workflows.
  verification:
    - curl -fsS https://blackroad.io/healthz >/dev/null
    - curl -fsS https://api.blackroad.io/health >/dev/null
    - aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" \
        --region us-west-2
    - aws cloudwatch get-metric-statistics --namespace AWS/ApplicationELB \
        --metric-name HTTPCode_ELB_5XX_Count --dimensions Name=LoadBalancer,Value=$ALB_ARN_SUFFIX \
        --start-time "$(date -u -d '15 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
        --end-time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" --period 300 --statistics Sum
notes:
  - Public site served via GitHub Pages; API and relay live on AWS ECS.
description: >-
  Primary customer-facing deployment managed by the CI & Deploy to Droplet workflow.
workflows:
  - .github/workflows/deploy.yml
