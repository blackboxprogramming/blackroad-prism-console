#!/usr/bin/env bash
set -euo pipefail

# Unified BlackRoad.io sync & deploy script
# Supports pushing code, syncing connectors, refreshing working copies,
# and redeploying the droplet so the live site reflects latest changes.
# Most actions are placeholders; fill in project-specific details as needed.

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

run() { ( set -x; "$@" ); }
log() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"; }
trim() {
  local s="$1"
  s="${s#${s%%[![:space:]]*}}"
  s="${s%${s##*[![:space:]]}}"
  printf '%s' "$s"
}

push_latest() {
  log "Pushing local commits to GitHub..."
  run git push origin "$(git rev-parse --abbrev-ref HEAD)"
}

sync_connectors() {
  log "Triggering connector syncs (Salesforce, Airtable, Slack, Linear, etc.)..."
  # Placeholder: invoke connector jobs or webhooks
}

refresh_working_copy() {
  log "Refreshing working copy..."
  local entries=()
  if [[ -n "${WORKING_COPY_DEVICES:-}" ]]; then
    IFS=',' read -r -a entries <<<"${WORKING_COPY_DEVICES}"
  elif [[ -n "${WORKING_COPY_HOST:-}" ]]; then
    entries=("${WORKING_COPY_HOST}:${WORKING_COPY_PATH:-/var/mobile/blackroad}")
  elif [[ -n "${WORKING_COPY_PATH:-}" ]]; then
    entries=("local:${WORKING_COPY_PATH}")
  else
    log "No working copy targets configured; skipping working copy refresh"
    return
  fi

  declare -A seen_targets=()
  local processed=0
  for raw in "${entries[@]}"; do
    local entry
    entry=$(trim "$raw")
    [[ -n "$entry" ]] || continue
    local host path key
    if [[ "$entry" == *":"* && "$entry" != /* ]]; then
      host="${entry%%:*}"
      path="${entry#*:}"
      [[ -n "$path" ]] || path="${WORKING_COPY_PATH:-/var/mobile/blackroad}"
    else
      host=""
      path="$entry"
    fi
    if [[ "${host,,}" == "local" ]]; then
      host=""
    fi
    if [[ -z "$path" ]]; then
      path="${WORKING_COPY_PATH:-/var/mobile/blackroad}"
    fi
    key="${host}|${path}"
    if [[ -n "${seen_targets[$key]:-}" ]]; then
      continue
    fi
    seen_targets[$key]=1
    processed=1
    if [[ -z "$host" ]]; then
      if [[ "$path" == ~* ]]; then
        path="${HOME}${path:1}"
      fi
      log "Refreshing local Working Copy at $path"
      run mkdir -p "$path"
      run git -C "$path" pull --rebase
    else
      local remote_path
      remote_path="$path"
      local remote_cmd
      remote_cmd="cd $(printf '%q' "$remote_path") && git pull --rebase"
      log "Refreshing Working Copy on $host:$remote_path"
      run ssh "$host" "$remote_cmd"
    fi
  done

  if [[ $processed -eq 0 ]]; then
    log "No valid working copy targets resolved; skipping working copy refresh"
  fi
}

deploy_droplet() {
  log "Deploying to droplet..."
  if [[ -n "${DROPLET_HOST:-}" ]]; then
    run ssh "$DROPLET_HOST" "cd /srv/blackroad && git pull --rebase && npm ci && npm run migrate && sudo systemctl restart blackroad-api nginx"
  else
    log "DROPLET_HOST not set; skipping droplet deploy"
  fi
}

check_status() {
  log "Checking deployment status..."
  if command -v curl >/dev/null 2>&1; then
    curl -fsSL "${STATUS_URL:-https://blackroad.io/deploy/status}" || true
    curl -fsSL "${HEALTH_URL:-https://blackroad.io/health}" || true
  else
    log "curl not available; status checks skipped"
  fi
}

case "${1:-}" in
  push)
    push_latest
    sync_connectors
    refresh_working_copy
    deploy_droplet
    check_status
    ;;
  refresh)
    refresh_working_copy
    deploy_droplet
    check_status
    ;;
  rebase)
    log "Rebasing with origin/main..."
    run git pull --rebase origin main
    push_latest
    ;;
  sync-salesforce)
    sync_connectors
    ;;
  *)
    echo "Usage: $0 {push|refresh|rebase|sync-salesforce}" >&2
    exit 1
    ;;
 esac

