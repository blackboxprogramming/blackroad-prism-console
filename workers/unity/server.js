import express from "express";
import { createWriteStream } from "fs";
import { mkdir, rm } from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";
import { randomUUID } from "crypto";
import Yazl from "yazl";

const app = express();
app.use(express.json());

const DEFAULT_PROJECT_NAME = "BlackRoadUnitySample";

function sanitizeProjectName(name) {
  if (typeof name !== "string") return "";
  const trimmed = name.trim();
  if (!trimmed) return "";
  return trimmed.replace(/[^A-Za-z0-9_-]+/g, "_").replace(/^_+|_+$/g, "");
}

function createUnityTemplateEntries(projectName) {
  return [
    { type: "dir", path: "Assets" },
    { type: "dir", path: "Assets/Scenes" },
    { type: "dir", path: "Assets/Scripts" },
    { type: "dir", path: "Packages" },
    { type: "dir", path: "ProjectSettings" },
    {
      type: "file",
      path: "README.md",
      content: `# ${projectName}\n\nGenerated by the BlackRoad Unity exporter.\n\nThis starter project contains a sample scene and basic project settings so you can immediately open it in Unity and begin iterating.`,
    },
    {
      type: "file",
      path: "ProjectSettings/ProjectVersion.txt",
      content: [
        "m_EditorVersion: 2022.3.17f1",
        "m_EditorVersionWithRevision: 2022.3.17f1 (revision 7dcf17075eb0)",
        "",
      ].join("\n"),
    },
    {
      type: "file",
      path: "ProjectSettings/ProjectSettings.asset",
      content: [
        "%YAML 1.1",
        "%TAG !u! tag:unity3d.com,2011:",
        "--- !u!129 &1",
        "PlayerSettings:",
        "  companyName: BlackRoad",
        `  productName: ${projectName}`,
        "  defaultScreenWidth: 1920",
        "  defaultScreenHeight: 1080",
        "  runInBackground: 1",
        "  resizableWindow: 1",
      ].join("\n"),
    },
    {
      type: "file",
      path: "Packages/manifest.json",
      content: JSON.stringify(
        {
          dependencies: {
            "com.unity.collab-proxy": "2.2.1",
            "com.unity.ide.vscode": "1.2.5",
            "com.unity.textmeshpro": "3.0.6",
            "com.unity.timeline": "1.7.5",
            "com.unity.ugui": "1.0.0",
            "com.unity.modules.ai": "1.0.0",
            "com.unity.modules.physics": "1.0.0",
            "com.unity.modules.ui": "1.0.0",
          },
        },
        null,
        2,
      ),
    },
    {
      type: "file",
      path: "Assets/Scenes/SampleScene.unity",
      content: [
        "%YAML 1.1",
        "%TAG !u! tag:unity3d.com,2011:",
        "--- !u!1 &1",
        "GameObject:",
        "  m_Name: Main Camera",
        "  m_TagString: MainCamera",
        "  m_Component:",
        "  - component: {fileID: 4}",
        "--- !u!4 &4",
        "Transform:",
        "  m_LocalPosition: {x: 0, y: 1, z: -10}",
        "  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
        "  m_LocalScale: {x: 1, y: 1, z: 1}",
        "--- !u!108 &10800001",
        "Camera:",
        "  m_ClearFlags: 1",
        "  m_BackGroundColor: {r: 0.192, g: 0.301, b: 0.475, a: 0}",
        "--- !u!1 &2",
        "GameObject:",
        "  m_Name: Directional Light",
        "  m_TagString: Untagged",
        "--- !u!108 &10800002",
        "Light:",
        "  m_Type: 1",
        "  m_Color: {r: 1, g: 0.956, b: 0.839, a: 1}",
      ].join("\n"),
    },
    {
      type: "file",
      path: "Assets/Scripts/Bootstrap.cs",
      content: [
        "using UnityEngine;",
        "",
        "public class Bootstrap : MonoBehaviour",
        "{",
        "    void Start()",
        "    {",
        "        Debug.Log(\"BlackRoad Unity exporter loaded Bootstrap script.\");",
        "    }",
        "}",
        "",
      ].join("\n"),
    },
  ];
}

async function writeZipArchive(zipPath, entries, projectName) {
  await rm(zipPath, { force: true });

  await new Promise((resolve, reject) => {
    const zipfile = new Yazl.ZipFile();
    const output = createWriteStream(zipPath);

    output.on("close", resolve);
    output.on("error", reject);
    zipfile.outputStream.on("error", reject);
    zipfile.outputStream.pipe(output);

    for (const entry of entries) {
      const entryPath = path.join(projectName, entry.path).replace(/\\/g, "/");
      if (entry.type === "dir") {
        zipfile.addEmptyDirectory(entryPath.endsWith("/") ? entryPath : `${entryPath}/`);
      } else {
        const buffer = Buffer.from(entry.content, "utf8");
        zipfile.addBuffer(buffer, entryPath);
      }
    }

    zipfile.end();
  });
}

export async function generateUnityProject({ projectName } = {}) {
  const safeName = sanitizeProjectName(projectName) || DEFAULT_PROJECT_NAME;
  const downloadsDir = path.join(process.cwd(), "downloads");
  await mkdir(downloadsDir, { recursive: true });

  const runId = randomUUID().split("-")[0];
  const fileName = `${safeName}-${runId}.zip`;
  const zipPath = path.join(downloadsDir, fileName);
  const entries = createUnityTemplateEntries(safeName);

  await writeZipArchive(zipPath, entries, safeName);

  return {
    ok: true,
    projectName: safeName,
    path: zipPath,
    relativePath: path.relative(process.cwd(), zipPath),
    files: entries
      .filter((entry) => entry.type === "file")
      .map((entry) => path.join(safeName, entry.path).replace(/\\/g, "/")),
  };
}

app.post("/export", async (req, res) => {
  try {
    const result = await generateUnityProject({ projectName: req.body?.projectName });
    res.json(result);
  } catch (error) {
    res.status(500).json({ ok: false, error: error instanceof Error ? error.message : String(error) });
  }
});

const modulePath = fileURLToPath(import.meta.url);
if (process.argv[1] === modulePath) {
  const port = process.env.PORT || 3000;
  app.listen(port, () => console.log("unity exporter listening on", port));
}

export default app;
