import crypto from "crypto";
import { createWriteStream } from "fs";
import express from "express";
import { mkdir } from "fs/promises";
import path from "path";
import archiver from "archiver";

const UNITY_VERSION = "2022.3.9f1";
const DEFAULT_EXPORT = {
  projectName: "BlackRoad Prism World",
  sceneName: "Gateway Plaza",
  description:
    "Starter Unity scene generated by the Prism exporter. Replace the placeholder assets and keep iterating!",
  author: "BlackRoad Studios"
};

const app = express();
app.use(express.json({ limit: "2mb" }));

app.post("/export", async (req, res) => {
  const config = normalizeExportOptions(req?.body);

  try {
    const outDir = path.join(process.cwd(), "downloads");
    await mkdir(outDir, { recursive: true });

    const zipPath = path.join(outDir, `${config.projectSlug}.zip`);
    const { filesWritten, generatedAt } = await writeUnityProjectArchive(zipPath, config);

    res.json({
      ok: true,
      path: zipPath,
      project: {
        name: config.projectName,
        slug: config.projectSlug,
        scene: config.sceneName,
        unityVersion: UNITY_VERSION,
        generatedAt,
        files: filesWritten
      }
    });
  } catch (error) {
    res.status(500).json({ ok: false, error: String(error) });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log("unity exporter listening on", port));

function normalizeExportOptions(body) {
  const options = typeof body === "object" && body !== null ? body : {};

  const projectName = normalizeName(options.projectName, DEFAULT_EXPORT.projectName);
  const projectSlug = slugify(projectName, "blackroad-prism-world");
  const sceneName = formatSceneName(options.sceneName, DEFAULT_EXPORT.sceneName);
  const sceneFile = `${sceneName}.unity`;

  return {
    projectName,
    projectSlug,
    sceneName,
    sceneFile,
    description: normalizeText(options.description, DEFAULT_EXPORT.description),
    author: normalizeText(options.author, DEFAULT_EXPORT.author)
  };
}

function normalizeName(value, fallback) {
  if (typeof value !== "string") return fallback;
  const trimmed = value.trim();
  return trimmed.length ? trimmed : fallback;
}

function normalizeText(value, fallback) {
  if (typeof value !== "string") return fallback;
  const trimmed = value.trim();
  return trimmed.length ? trimmed : fallback;
}

function slugify(value, fallback) {
  const slug = value
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
  return slug || fallback;
}

function formatSceneName(value, fallback) {
  if (typeof value !== "string") return fallback;
  const words = value
    .trim()
    .replace(/[^A-Za-z0-9]+/g, " ")
    .split(" ")
    .filter(Boolean);
  if (!words.length) return fallback;
  return words.map(capitalize).join("");
}

function capitalize(word) {
  if (!word.length) return word;
  return word[0].toUpperCase() + word.slice(1);
}

async function writeUnityProjectArchive(zipPath, config) {
  const generatedAt = new Date();
  const templateContext = {
    ...config,
    unityVersion: UNITY_VERSION,
    generatedAtIso: generatedAt.toISOString(),
    generatedAtEpoch: Math.floor(generatedAt.getTime() / 1000)
  };

  const files = buildUnityTemplateFiles(templateContext);

  await new Promise((resolve, reject) => {
    const output = createWriteStream(zipPath);
    const archive = archiver("zip", { zlib: { level: 9 } });

    output.on("close", resolve);
    output.on("error", reject);
    archive.on("error", reject);

    archive.pipe(output);

    for (const file of files) {
      archive.append(file.contents, { name: file.path });
    }

    archive.finalize();
  });

  return { filesWritten: files.length, generatedAt: templateContext.generatedAtIso };
}

function buildUnityTemplateFiles(context) {
  const sceneGuid = unityGuid(`${context.projectName}:${context.sceneName}:scene`);
  const scriptGuid = unityGuid(`${context.projectName}:${context.sceneName}:script`);
  const scenesFolderGuid = unityGuid(`${context.projectName}:${context.sceneName}:folder:scenes`);
  const scriptsFolderGuid = unityGuid(`${context.projectName}:${context.sceneName}:folder:scripts`);

  return [
    {
      path: "README.md",
      contents: buildReadme(context)
    },
    {
      path: ".gitignore",
      contents: buildGitignore()
    },
    {
      path: "ProjectSettings/ProjectVersion.txt",
      contents: buildProjectVersion(context.unityVersion)
    },
    {
      path: "ProjectSettings/ProjectSettings.asset",
      contents: buildProjectSettings(context)
    },
    {
      path: "ProjectSettings/EditorBuildSettings.asset",
      contents: buildEditorBuildSettings(context, sceneGuid)
    },
    {
      path: "Packages/manifest.json",
      contents: buildPackagesManifest()
    },
    {
      path: "Packages/packages-lock.json",
      contents: buildPackagesLock()
    },
    {
      path: "Assets/Scenes.meta",
      contents: buildFolderMeta(scenesFolderGuid, context.generatedAtEpoch)
    },
    {
      path: `Assets/Scenes/${context.sceneFile}`,
      contents: buildSceneFile(context, sceneGuid, scriptGuid)
    },
    {
      path: `Assets/Scenes/${context.sceneFile}.meta`,
      contents: buildSceneMeta(sceneGuid, context.generatedAtEpoch)
    },
    {
      path: "Assets/Scripts.meta",
      contents: buildFolderMeta(scriptsFolderGuid, context.generatedAtEpoch)
    },
    {
      path: "Assets/Scripts/SceneMetadata.cs",
      contents: buildSceneMetadataScript(context, sceneGuid)
    },
    {
      path: "Assets/Scripts/SceneMetadata.cs.meta",
      contents: buildScriptMeta(scriptGuid, context.generatedAtEpoch)
    }
  ];
}

function buildReadme(context) {
  return `# ${context.projectName}\n\n${context.description}\n\n- **Author:** ${context.author}\n- **Scene:** Assets/Scenes/${context.sceneFile}\n- **Unity Version:** ${context.unityVersion}\n- **Generated:** ${context.generatedAtIso}\n\nNext steps:\n1. Open the project folder in the Unity Hub.\n2. Import your assets and extend the \`${context.sceneName}\` scene.\n3. Replace the placeholder metadata behaviour with your own game logic.\n`;
}

function buildGitignore() {
  return `Library/\nTemp/\nObj/\nLogs/\nUserSettings/\nMemoryCaptures/\nBuild/\nBuilds/\nDerivedData/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.user\n*.userprefs\n`;
}

function buildProjectVersion(version) {
  return `m_EditorVersion: ${version}\nm_EditorVersionWithRevision: ${version} (BlackRoad)\n`;
}

function buildProjectSettings(context) {
  return `%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!129 &1\nPlayerSettings:\n  m_ObjectHideFlags: 0\n  serializedVersion: 23\n  productGUID: 00000000000000000000000000000000\n  AndroidProfiler: 0\n  companyName: ${yamlString(context.author)}\n  productName: ${yamlString(context.projectName)}\n  defaultCursor: {fileID: 0}\n  cursorHotspot: {x: 0, y: 0}\n  m_SplashScreenBackgroundColor: {r: 0.039, g: 0.039, b: 0.039, a: 1}\n  m_ShowUnitySplashScreen: 1\n  m_SplashScreenLogos: []\n  m_SplashScreenOverlayOpacity: 1\n  defaultScreenWidth: 1920\n  defaultScreenHeight: 1080\n  defaultScreenOrientation: 1\n  targetDevice: 2\n  useMacAppStoreValidation: 0\n  usePlayerLog: 1\n  runInBackground: 1\n  forceSingleInstance: 0\n  resizableWindow: 1\n  bundleVersion: 0.1.0\n  preloadedAssets: []\n`;
}

function buildEditorBuildSettings(context, sceneGuid) {
  return `%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!1045 &1\nEditorBuildSettings:\n  m_ObjectHideFlags: 0\n  serializedVersion: 2\n  m_Scenes:\n  - enabled: 1\n    path: Assets/Scenes/${context.sceneFile}\n    guid: ${sceneGuid}\n  m_configObjects: {}\n`;
}

function buildPackagesManifest() {
  return `${JSON.stringify(
    {
      dependencies: {
        "com.unity.collab-proxy": "2.0.5",
        "com.unity.ide.rider": "3.0.24",
        "com.unity.ide.visualstudio": "2.0.22",
        "com.unity.ide.vscode": "1.2.5",
        "com.unity.render-pipelines.universal": "14.0.11",
        "com.unity.test-framework": "1.1.33",
        "com.unity.textmeshpro": "3.0.6",
        "com.unity.timeline": "1.7.5",
        "com.unity.ugui": "1.0.0"
      },
      registry: "https://packages.unity.com"
    },
    null,
    2
  )}\n`;
}

function buildPackagesLock() {
  return `${JSON.stringify({ dependencies: {} }, null, 2)}\n`;
}

function buildFolderMeta(guid, timestamp) {
  return `fileFormatVersion: 2\nguid: ${guid}\nfolderAsset: yes\ntimeCreated: ${timestamp}\nlicenseType: Free\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n`;
}

function buildSceneMeta(guid, timestamp) {
  return `fileFormatVersion: 2\nguid: ${guid}\ntimeCreated: ${timestamp}\nlicenseType: Free\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n`;
}

function buildScriptMeta(guid, timestamp) {
  return `fileFormatVersion: 2\nguid: ${guid}\ntimeCreated: ${timestamp}\nMonoImporter:\n  externalObjects: {}\n  serializedVersion: 2\n  defaultReferences: []\n  executionOrder: 0\n  icon: {instanceID: 0}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n`;
}

function buildSceneMetadataScript(context, sceneGuid) {
  return `using UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace BlackRoad.Prism.Unity\n{\n    [DisallowMultipleComponent]\n    public class SceneMetadata : MonoBehaviour\n    {\n        [TextArea]\n        [SerializeField] private string description = ${csharpString(context.description)};\n        [SerializeField] private string author = ${csharpString(context.author)};\n        [SerializeField] private string generatedAt = ${csharpString(context.generatedAtIso)};\n        [SerializeField] private string sceneName = ${csharpString(context.sceneName)};\n        [SerializeField] private string projectName = ${csharpString(context.projectName)};\n        [SerializeField] private string sceneGuid = ${csharpString(sceneGuid)};\n\n        private void Awake()\n        {\n            var activeScene = SceneManager.GetActiveScene();\n            if (string.IsNullOrEmpty(sceneName))\n            {\n                sceneName = activeScene.name;\n            }\n\n            if (string.IsNullOrEmpty(projectName))\n            {\n                projectName = Application.productName;\n            }\n\n            Debug.Log($"[SceneMetadata] {projectName}::{sceneName} generated at {generatedAt} by {author}. {description}");\n        }\n    }\n}\n`;
}

function buildSceneFile(context, sceneGuid, scriptGuid) {
  const ids = allocateSceneIds();
  const lines = [
    "%YAML 1.1",
    "%TAG !u! tag:unity3d.com,2011:",
    `--- !u!104 &${ids.renderSettings}`,
    "RenderSettings:",
    "  m_ObjectHideFlags: 0",
    "  serializedVersion: 9",
    "  m_Fog: 0",
    "  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}",
    "  m_FogMode: 3",
    "  m_FogDensity: 0.01",
    "  m_LinearFogStart: 0",
    "  m_LinearFogEnd: 300",
    "  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}",
    "  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}",
    "  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}",
    "  m_AmbientIntensity: 1",
    "  m_AmbientMode: 1",
    "  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}",
    "  m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}",
    "  m_Sun: {fileID: 0}",
    "  m_IndirectSpecularColor: {r: 0.446579, g: 0.496413, b: 0.574817, a: 1}",
    "  m_UseRadianceAmbientProbe: 0",
    `--- !u!157 &${ids.lightmapSettings}`,
    "LightmapSettings:",
    "  m_ObjectHideFlags: 0",
    "  serializedVersion: 12",
    "  m_GIWorkflowMode: 1",
    "  m_GISettings:",
    "    serializedVersion: 2",
    "    m_BounceScale: 1",
    "    m_IndirectOutputScale: 1",
    "    m_AlbedoBoost: 1",
    "    m_EnvironmentLightingMode: 0",
    "  m_LightmapEditorSettings:",
    "    serializedVersion: 12",
    "    m_Resolution: 1",
    "    m_BakeResolution: 40",
    "    m_AtlasSize: 1024",
    "  m_LightingDataAsset: {fileID: 0}",
    "  m_UseShadowmask: 1",
    `--- !u!196 &${ids.navMeshSettings}`,
    "NavMeshSettings:",
    "  serializedVersion: 2",
    "  m_ObjectHideFlags: 0",
    "  m_BuildSettings:",
    "    serializedVersion: 2",
    "    agentTypeID: 0",
    "    agentRadius: 0.5",
    "    agentHeight: 2",
    "    agentSlope: 45",
    "    agentClimb: 0.4",
    "    minRegionArea: 2",
    "  m_NavMeshData: {fileID: 0}",
    `--- !u!1 &${ids.directionalLight.go}`,
    "GameObject:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    "  serializedVersion: 6",
    "  m_Component:",
    `  - component: {fileID: ${ids.directionalLight.transform}}`,
    `  - component: {fileID: ${ids.directionalLight.light}}`,
    "  m_Layer: 0",
    "  m_Name: Directional Light",
    "  m_TagString: Untagged",
    "  m_Icon: {fileID: 0}",
    "  m_NavMeshLayer: 0",
    "  m_StaticEditorFlags: 0",
    "  m_IsActive: 1",
    `--- !u!4 &${ids.directionalLight.transform}`,
    "Transform:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    `  m_GameObject: {fileID: ${ids.directionalLight.go}}`,
    "  m_LocalRotation: {x: 0.4082179, y: 0.4082179, z: 0.2345697, w: 0.8223631}",
    "  m_LocalPosition: {x: 0, y: 3, z: 0}",
    "  m_LocalScale: {x: 1, y: 1, z: 1}",
    "  m_ConstrainProportionsScale: 0",
    "  m_Children: []",
    "  m_Father: {fileID: 0}",
    "  m_RootOrder: 0",
    "  m_LocalEulerAnglesHint: {x: 50, y: -30, z: 0}",
    `--- !u!108 &${ids.directionalLight.light}`,
    "Light:",
    "  m_ObjectHideFlags: 0",
    `  m_GameObject: {fileID: ${ids.directionalLight.go}}`,
    "  m_Enabled: 1",
    "  serializedVersion: 10",
    "  m_Type: 1",
    "  m_Color: {r: 1, g: 0.95686275, b: 0.8392157, a: 1}",
    "  m_Intensity: 1",
    "  m_Shadows:",
    "    m_Type: 2",
    "    m_Resolution: -1",
    "    m_CustomResolution: -1",
    "    m_Strength: 1",
    "    m_Bias: 0.05",
    "    m_NormalBias: 0.4",
    "    m_NearPlane: 0.2",
    "  m_CookieSize: 10",
    "  m_DrawHalo: 0",
    "  m_Flare: {fileID: 0}",
    "  m_RenderMode: 0",
    "  m_CullingMask:",
    "    serializedVersion: 2",
    "    m_Bits: 4294967295",
    "  m_Lightmapping: 4",
    "  m_LightShadowCasterMode: 0",
    "  m_AreaSize: {x: 1, y: 1}",
    "  m_BounceIntensity: 1",
    "  m_ColorTemperature: 6570",
    "  m_UseColorTemperature: 0",
    "  m_BoundingSphereOverride: {x: 0, y: 0, z: 0, w: 0}",
    "  m_UseBoundingSphereOverride: 0",
    "  m_ShadowRadius: 0",
    "  m_ShadowAngle: 0",
    `--- !u!1 &${ids.camera.go}`,
    "GameObject:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    "  serializedVersion: 6",
    "  m_Component:",
    `  - component: {fileID: ${ids.camera.transform}}`,
    `  - component: {fileID: ${ids.camera.camera}}`,
    `  - component: {fileID: ${ids.camera.audio}}`,
    "  m_Layer: 0",
    "  m_Name: Main Camera",
    "  m_TagString: MainCamera",
    "  m_Icon: {fileID: 0}",
    "  m_NavMeshLayer: 0",
    "  m_StaticEditorFlags: 0",
    "  m_IsActive: 1",
    `--- !u!4 &${ids.camera.transform}`,
    "Transform:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    `  m_GameObject: {fileID: ${ids.camera.go}}`,
    "  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
    "  m_LocalPosition: {x: 0, y: 1, z: -10}",
    "  m_LocalScale: {x: 1, y: 1, z: 1}",
    "  m_ConstrainProportionsScale: 0",
    "  m_Children: []",
    "  m_Father: {fileID: 0}",
    "  m_RootOrder: 1",
    "  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
    `--- !u!20 &${ids.camera.camera}`,
    "Camera:",
    "  m_ObjectHideFlags: 0",
    `  m_GameObject: {fileID: ${ids.camera.go}}`,
    "  m_Enabled: 1",
    "  serializedVersion: 2",
    "  m_ClearFlags: 1",
    "  m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}",
    "  m_projectionMatrixMode: 1",
    "  m_GateFitMode: 2",
    "  m_FOVAxisMode: 0",
    "  m_SensorSize: {x: 36, y: 24}",
    "  m_LensShift: {x: 0, y: 0}",
    "  m_FocalLength: 50",
    "  m_NormalizedViewPortRect:",
    "    serializedVersion: 2",
    "    x: 0",
    "    y: 0",
    "    width: 1",
    "    height: 1",
    "  near clip plane: 0.3",
    "  far clip plane: 1000",
    "  field of view: 60",
    "  orthographic: 0",
    "  orthographic size: 5",
    "  m_Depth: -1",
    "  m_CullingMask:",
    "    serializedVersion: 2",
    "    m_Bits: 4294967295",
    "  m_RenderingPath: -1",
    "  m_TargetTexture: {fileID: 0}",
    "  m_TargetDisplay: 0",
    "  m_TargetEye: 3",
    "  m_HDR: 1",
    "  m_AllowMSAA: 1",
    "  m_AllowDynamicResolution: 0",
    "  m_ForceIntoRT: 0",
    "  m_OcclusionCulling: 1",
    `--- !u!81 &${ids.camera.audio}`,
    "AudioListener:",
    "  m_ObjectHideFlags: 0",
    `  m_GameObject: {fileID: ${ids.camera.go}}`,
    "  m_Enabled: 1",
    `--- !u!1 &${ids.metadata.go}`,
    "GameObject:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    "  serializedVersion: 6",
    "  m_Component:",
    `  - component: {fileID: ${ids.metadata.transform}}`,
    `  - component: {fileID: ${ids.metadata.behaviour}}`,
    "  m_Layer: 0",
    "  m_Name: Scene Metadata",
    "  m_TagString: Untagged",
    "  m_Icon: {fileID: 0}",
    "  m_NavMeshLayer: 0",
    "  m_StaticEditorFlags: 0",
    "  m_IsActive: 1",
    `--- !u!4 &${ids.metadata.transform}`,
    "Transform:",
    "  m_ObjectHideFlags: 0",
    "  m_CorrespondingSourceObject: {fileID: 0}",
    "  m_PrefabInstance: {fileID: 0}",
    "  m_PrefabAsset: {fileID: 0}",
    `  m_GameObject: {fileID: ${ids.metadata.go}}`,
    "  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
    "  m_LocalPosition: {x: 0, y: 0, z: 0}",
    "  m_LocalScale: {x: 1, y: 1, z: 1}",
    "  m_ConstrainProportionsScale: 0",
    "  m_Children: []",
    "  m_Father: {fileID: 0}",
    "  m_RootOrder: 2",
    "  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
    `--- !u!114 &${ids.metadata.behaviour}`,
    "MonoBehaviour:",
    "  m_ObjectHideFlags: 0",
    `  m_GameObject: {fileID: ${ids.metadata.go}}`,
    "  m_Enabled: 1",
    "  m_EditorHideFlags: 0",
    `  m_Script: {fileID: 11500000, guid: ${scriptGuid}, type: 3}`,
    "  m_Name: SceneMetadata",
    "  m_EditorClassIdentifier: ",
    formatYamlMultiline("description", context.description, 1),
    `  author: ${yamlString(context.author)}`,
    `  generatedAt: ${yamlString(context.generatedAtIso)}`,
    `  sceneName: ${yamlString(context.sceneName)}`,
    `  projectName: ${yamlString(context.projectName)}`,
    `  sceneGuid: ${yamlString(sceneGuid)}`,
    ""
  ];

  return lines.join("\n");
}

function formatYamlMultiline(key, value, indentLevel = 0) {
  const indent = "  ".repeat(indentLevel);
  if (!value) {
    return `${indent}${key}: ""`;
  }

  const lines = String(value).split(/\r?\n/);
  if (lines.length === 1) {
    return `${indent}${key}: ${yamlString(lines[0])}`;
  }

  const body = lines.map((line) => `${indent}  ${line}`).join("\n");
  return `${indent}${key}: |\n${body}`;
}

function yamlString(value) {
  const safe = String(value).replace(/\\/g, "\\\\").replace(/"/g, '\\"');
  return `"${safe}"`;
}

function csharpString(value) {
  const safe = String(value)
    .replace(/\\/g, "\\\\")
    .replace(/"/g, '\\"')
    .replace(/\r?\n/g, "\\n");
  return `"${safe}"`;
}

function unityGuid(seed) {
  return crypto.createHash("md5").update(seed).digest("hex");
}

function allocateSceneIds() {
  return {
    renderSettings: 10400000,
    lightmapSettings: 15700000,
    navMeshSettings: 19600000,
    directionalLight: { go: 11100000, transform: 11100001, light: 11100002 },
    camera: { go: 11200000, transform: 11200001, camera: 11200002, audio: 11200003 },
    metadata: { go: 11300000, transform: 11300001, behaviour: 11300002 }
  };
}
