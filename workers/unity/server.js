import express from "express";
import archiver from "archiver";
import { createWriteStream } from "fs";
import { mkdir } from "fs/promises";
import path from "path";
import { finished } from "stream/promises";

const DEFAULT_PROJECT_NAME = "BlackRoadPrototype";
const DEFAULT_SCENE_NAME = "MainScene";

const DEFAULT_DESCRIPTION = "Unity prototype generated by BlackRoad";

const app = express();
app.use(express.json());

app.post("/export", async (req, res) => {
  try {
    const requestBody = req.body ?? {};
    const projectName = sanitiseProjectName(
      requestBody.projectName || DEFAULT_PROJECT_NAME,
    );
    const sceneName = sanitiseSceneName(
      requestBody.sceneName || DEFAULT_SCENE_NAME,
    );
    const description = sanitiseDescription(requestBody.description);

    const outDir = path.join(process.cwd(), "downloads");
    await mkdir(outDir, { recursive: true });
    const zipName = `${projectName.toLowerCase()}-${Date.now()}.zip`;
    const zipPath = path.join(outDir, zipName);

    await createUnityTemplateZip({
      zipPath,
      projectName,
      sceneName,
      description,
    });

    res.json({
      ok: true,
      path: zipPath,
      projectName,
      sceneName,
    });
  } catch (error) {
    console.error("Failed to generate Unity export", error);
    res.status(500).json({ ok: false, error: String(error) });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log("unity exporter listening on", port));

async function createUnityTemplateZip({
  zipPath,
  projectName,
  sceneName,
  description,
}) {
  const archive = archiver("zip", { zlib: { level: 9 } });
  const stream = createWriteStream(zipPath);
  const projectRoot = `${projectName}`;

  archive.on("warning", (warning) => {
    console.warn("Unity exporter warning", warning);
  });

  archive.on("error", (error) => {
    throw error;
  });

  archive.pipe(stream);

  const manifest = buildUnityManifest();
  const projectVersion = buildProjectVersion();
  const sceneContents = buildScene(sceneName, description);
  const behaviourScript = buildBehaviourScript(sceneName);

  archive.append(readmeContents({ projectName, sceneName, description }), {
    name: `${projectRoot}/README.md`,
  });
  archive.append(JSON.stringify(manifest, null, 2), {
    name: `${projectRoot}/Packages/manifest.json`,
  });
  archive.append(projectVersion, {
    name: `${projectRoot}/ProjectSettings/ProjectVersion.txt`,
  });
  archive.append(sceneContents, {
    name: `${projectRoot}/Assets/Scenes/${sceneName}.unity`,
  });
  archive.append(behaviourScript, {
    name: `${projectRoot}/Assets/Scripts/BlackRoadWelcome.cs`,
  });

  await archive.finalize();
  await finished(stream);
}

function sanitiseProjectName(value) {
  return String(value)
    .replace(/[^A-Za-z0-9_-]/g, "_")
    .replace(/_{2,}/g, "_")
    .replace(/^_+|_+$/g, "")
    .slice(0, 50) || DEFAULT_PROJECT_NAME;
}

function sanitiseSceneName(value) {
  const sanitised = String(value)
    .replace(/[^A-Za-z0-9_-]/g, "_")
    .replace(/_{2,}/g, "_")
    .replace(/^_+|_+$/g, "")
    .slice(0, 50);
  return sanitised || DEFAULT_SCENE_NAME;
}

function sanitiseDescription(value) {
  if (typeof value !== "string") {
    return DEFAULT_DESCRIPTION;
  }
  return value
    .replace(/\r?\n|\r/g, " ")
    .replace(/\s{2,}/g, " ")
    .trim()
    .slice(0, 280) || DEFAULT_DESCRIPTION;
}

function buildUnityManifest() {
  return {
    dependencies: {
      "com.unity.ide.rider": "3.0.22",
      "com.unity.ide.visualstudio": "2.0.18",
      "com.unity.test-framework": "1.4.5",
      "com.unity.textmeshpro": "3.0.6",
      "com.unity.timeline": "1.7.6",
      "com.unity.ugui": "1.0.0",
    },
    registry: "https://packages.unity.com",
  };
}

function buildProjectVersion() {
  return [
    "m_EditorVersion: 2022.3.40f1",
    "m_EditorVersionWithRevision: 2022.3.40f1 (1234567890ab)",
  ].join("\n") + "\n";
}

function buildScene(sceneName, description) {
  return [
    "%YAML 1.1",
    "%TAG !u! tag:unity3d.com,2011:",
    "--- !u!1045 &1",
    "SceneSettings:",
    "  m_ObjectHideFlags: 0",
    "  m_EditorData: {}",
    `  m_Description: ${description}`,
    "--- !u!1 &2",
    "GameObject:",
    `  m_Name: ${sceneName}`,
    "  m_Component:",
    "  - component: {fileID: 4}",
    "  - component: {fileID: 114}",
    "--- !u!4 &4",
    "Transform:",
    "  m_LocalPosition: {x: 0, y: 0, z: 0}",
    "  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
    "  m_LocalScale: {x: 1, y: 1, z: 1}",
    "--- !u!114 &114",
    "MonoBehaviour:",
    "  m_Name: BlackRoadWelcome",
    "  m_Script: {fileID: 11500000, guid: 00000000000000000000000000000000, type: 3}",
    `  message: Welcome to ${sceneName}!`,
    "",
  ].join("\n");
}

function buildBehaviourScript(sceneName) {
  return [
    "using UnityEngine;",
    "",
    "namespace BlackRoad.Generated {",
    "  public class BlackRoadWelcome : MonoBehaviour {",
    `    [SerializeField] private string message = "Welcome to ${sceneName}!";`,
    "",
    "    private void Start() {",
    "      Debug.Log(message);",
    "    }",
    "  }",
    "}",
    "",
  ].join("\n");
}

function readmeContents({ projectName, sceneName, description }) {
  return [
    `# ${projectName}`,
    "",
    description,
    "",
    "## Getting Started",
    "",
    "1. Open the project in Unity 2022.3 LTS or newer.",
    `2. Load the scene located at Assets/Scenes/${sceneName}.unity.`,
    "3. Press Play to verify the autogenerated welcome script logs in the Console.",
    "",
    "This template was generated by the BlackRoad Unity exporter worker.",
    "",
  ].join("\n");
}
