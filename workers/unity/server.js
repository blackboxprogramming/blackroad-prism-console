import express from "express";
import archiver from "archiver";
import { createWriteStream } from "fs";
import { mkdir, readFile } from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

const app = express();
app.use(express.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const templateDir = path.join(__dirname, "template");
const scriptTemplatePath = path.join(
  templateDir,
  "Assets",
  "Scripts",
  "BlackRoadBootstrap.cs.tmpl",
);

const DEFAULT_PROJECT_NAME = "BlackRoadUnityProject";

function sanitizeProjectName(rawName) {
  if (!rawName || typeof rawName !== "string") {
    return DEFAULT_PROJECT_NAME;
  }

  const cleaned = rawName
    .replace(/[^a-z0-9 _-]/gi, "")
    .trim()
    .replace(/\s+/g, "-");

  return cleaned.length ? cleaned.slice(0, 60) : DEFAULT_PROJECT_NAME;
}

function escapeForCSharpString(value) {
  return value
    .replace(/\\/g, "\\\\")
    .replace(/\r?\n/g, "\\n")
    .replace(/"/g, '\\"');
}

function buildProjectOverview({ projectName, description }) {
  const lines = [
    `# ${projectName}`,
    "",
    "Welcome to your freshly generated Unity project scaffold. This bundle",
    "includes a starter script that prints a greeting when the scene loads and",
    "a package manifest pre-wired with common Unity editor integrations.",
    "",
    "## Next steps",
    "",
    "1. Open the project in the Unity Hub or directly via the editor.",
    "2. Create a new scene in `Assets/Scenes` and attach the",
    "   `BlackRoadBootstrap` component to an object.",
    "3. Replace the greeting in `Assets/Scripts/BlackRoadBootstrap.cs` with",
    "   your own onboarding or prototype logic.",
    "",
  ];

  if (description?.trim()) {
    lines.push("## Project pitch", "", description.trim(), "");
  }

  lines.push(
    "## Generated metadata",
    "",
    `- Exported at: ${new Date().toISOString()}`,
    "- Generated by: BlackRoad Unity Exporter",
    "",
  );

  return `${lines.join("\n")}\n`;
}

app.post("/export", async (req, res) => {
  const { projectName, description, welcomeMessage } = req.body ?? {};
  const safeProjectName = sanitizeProjectName(projectName);
  const downloadDir = path.join(process.cwd(), "downloads");
  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
  const zipFileName = `${safeProjectName}-${timestamp}.zip`;
  const zipPath = path.join(downloadDir, zipFileName);

  try {
    await mkdir(downloadDir, { recursive: true });

    const output = createWriteStream(zipPath);
    const archive = archiver("zip", { zlib: { level: 9 } });

    const archiveCompletion = new Promise((resolve, reject) => {
      output.on("close", resolve);
      output.on("error", reject);
      archive.on("error", reject);
    });

    archive.pipe(output);

    archive.glob("**/*", {
      cwd: templateDir,
      dot: true,
      ignore: ["**/*.tmpl"],
    }, {
      prefix: safeProjectName,
    });

    const scriptTemplate = await readFile(scriptTemplatePath, "utf8");
    const finalWelcomeMessage =
      typeof welcomeMessage === "string" && welcomeMessage.trim().length
        ? welcomeMessage.trim()
        : `Welcome to ${safeProjectName}! Let's build something amazing.`;
    const scriptContent = scriptTemplate
      .replace(/__PROJECT_NAME__/g, safeProjectName)
      .replace(
        "Let's build something amazing.",
        escapeForCSharpString(finalWelcomeMessage),
      );

    archive.append(scriptContent, {
      name: path.posix.join(
        safeProjectName,
        "Assets",
        "Scripts",
        "BlackRoadBootstrap.cs",
      ),
    });

    const overview = buildProjectOverview({
      projectName: safeProjectName,
      description,
    });

    archive.append(overview, {
      name: path.posix.join(safeProjectName, "PROJECT_OVERVIEW.md"),
    });

    archive.append(
      JSON.stringify(
        {
          projectName: safeProjectName,
          description: description ?? null,
          welcomeMessage: finalWelcomeMessage,
          generatedAt: new Date().toISOString(),
        },
        null,
        2,
      ),
      {
        name: path.posix.join(safeProjectName, "BlackRoadConfig.json"),
      },
    );

    await archive.finalize();
    await archiveCompletion;

    res.json({
      ok: true,
      path: zipPath,
      projectName: safeProjectName,
      bytes: archive.pointer(),
    });
  } catch (error) {
    console.error("Unity exporter failed", error);
    res.status(500).json({
      ok: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log("unity exporter listening on", port));
