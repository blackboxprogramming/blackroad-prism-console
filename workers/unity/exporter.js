import { mkdir, mkdtemp, rm, writeFile } from "fs/promises";
import path from "path";
import { tmpdir } from "os";
import { execFile } from "child_process";
import { promisify } from "util";

const execFileAsync = promisify(execFile);

const UNITY_TEMPLATE_FILES = (
  projectName,
  description,
) => {
  const sanitizedDescription = description?.trim();
  return [
    {
      relativePath: path.join(projectName, "README.md"),
      contents: `# ${projectName}\n\n${
        sanitizedDescription ||
        "This archive contains a starter Unity project scaffold generated by the BlackRoad Prism console."
      }\n\n## Next steps\n- Open the project in Unity Hub.\n- Regenerate assets and package references as needed.\n- Replace stub content with production-ready assets.\n`,
    },
    {
      relativePath: path.join(
        projectName,
        "ProjectSettings",
        "ProjectVersion.txt",
      ),
      contents: "m_EditorVersion: 2022.3.16f1\n",
    },
    {
      relativePath: path.join(
        projectName,
        "ProjectSettings",
        "EditorBuildSettings.asset",
      ),
      contents:
        "%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!1045 &1\nEditorBuildSettings:\n  m_ObjectHideFlags: 0\n  serializedVersion: 2\n  m_Scenes:\n  - enabled: 1\n    path: Assets/Scenes/Prototype.unity\n    guid: 00000000000000000000000000000000\n  m_configObjects: {}\n",
    },
    {
      relativePath: path.join(projectName, "Packages", "manifest.json"),
      contents: `${JSON.stringify(
        {
          dependencies: {
            "com.unity.collab-proxy": "1.17.7",
            "com.unity.ide.rider": "3.0.28",
            "com.unity.ide.visualstudio": "2.0.22",
            "com.unity.ide.vscode": "1.2.5",
            "com.unity.test-framework": "1.3.7",
            "com.unity.textmeshpro": "3.0.6",
            "com.unity.timeline": "1.7.6",
            "com.unity.ugui": "1.0.0",
            "com.unity.modules.ai": "1.0.0",
            "com.unity.modules.animation": "1.0.0",
            "com.unity.modules.audio": "1.0.0",
            "com.unity.modules.director": "1.0.0",
            "com.unity.modules.imageconversion": "1.0.0",
            "com.unity.modules.particlesystem": "1.0.0",
            "com.unity.modules.physics": "1.0.0",
            "com.unity.modules.physics2d": "1.0.0",
            "com.unity.modules.ui": "1.0.0",
            "com.unity.modules.uielements": "1.0.0",
            "com.unity.modules.unitywebrequest": "1.0.0",
          },
        },
        null,
        2,
      )}\n`,
    },
    {
      relativePath: path.join(projectName, "Assets", "Scenes", "Prototype.unity"),
      contents:
        "%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!1 &1\nGameObject:\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  serializedVersion: 6\n  m_Component:\n  - component: {fileID: 4}\n  m_Layer: 0\n  m_Name: EnvironmentRoot\n  m_TagString: Untagged\n  m_Icon: {fileID: 0}\n  m_NavMeshLayer: 0\n  m_StaticEditorFlags: 0\n  m_IsActive: 1\n--- !u!4 &4\nTransform:\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  m_GameObject: {fileID: 1}\n  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}\n  m_LocalPosition: {x: 0, y: 0, z: 0}\n  m_LocalScale: {x: 1, y: 1, z: 1}\n  m_Children: []\n  m_Father: {fileID: 0}\n  m_RootOrder: 0\n  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}\n--- !u!196 &5\nPrefabInstance:\n  m_ObjectHideFlags: 0\n  serializedVersion: 2\n  m_Modification:\n    m_TransformParent: {fileID: 4}\n    m_Modifications: []\n    m_RemovedComponents: []\n  m_SourcePrefab: {fileID: 0}\n  m_IsPrefabAsset: 0\n",
    },
    {
      relativePath: path.join(
        projectName,
        "Assets",
        "Scripts",
        "Bootstrap.cs",
      ),
      contents:
        "using UnityEngine;\n\npublic class Bootstrap : MonoBehaviour\n{\n    void Start()\n    {\n        Debug.Log(\"Bootstrap script attached successfully.\");\n    }\n}\n",
    },
  ];
};

const sanitizeProjectName = (input) => {
  const fallback = "BlackRoadUnityPrototype";
  if (!input) return fallback;
  const sanitized = String(input)
    .trim()
    .replace(/\s+/g, "-")
    .replace(/[^A-Za-z0-9_-]/g, "");
  return sanitized.length > 0 ? sanitized : fallback;
};

export async function createUnityProject({ projectName, description } = {}) {
  const safeName = sanitizeProjectName(projectName);
  const downloadsDir = path.join(process.cwd(), "downloads");
  await mkdir(downloadsDir, { recursive: true });

  const tmpRoot = await mkdtemp(path.join(tmpdir(), "unity-export-"));
  const templateFiles = UNITY_TEMPLATE_FILES(safeName, description);

  try {
    for (const file of templateFiles) {
      const targetPath = path.join(tmpRoot, file.relativePath);
      await mkdir(path.dirname(targetPath), { recursive: true });
      await writeFile(targetPath, file.contents, "utf8");
    }

    const zipName = `${safeName}-${Date.now()}.zip`;
    const zipPath = path.join(downloadsDir, zipName);
    await execFileAsync("zip", ["-qr", zipPath, safeName], {
      cwd: tmpRoot,
    });

    return {
      projectName: safeName,
      zipPath,
      zipName,
      filesGenerated: templateFiles.length,
    };
  } catch (error) {
    const enriched = new Error(
      `Failed to build Unity project archive: ${error.message}`,
    );
    enriched.cause = error;
    throw enriched;
  } finally {
    await rm(tmpRoot, { recursive: true, force: true });
  }
}
