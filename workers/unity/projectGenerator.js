import { writeFile } from "fs/promises";
import crypto from "crypto";

const DEFAULT_OBJECTS = [
  {
    name: "PrototypeCube",
    type: "Cube",
    position: { x: 0, y: 0.5, z: 0 },
    rotation: { x: 0, y: 0, z: 0 },
    scale: { x: 1, y: 1, z: 1 },
  },
];

const SUPPORTED_TYPES = new Set([
  "cube",
  "sphere",
  "capsule",
  "cylinder",
  "plane",
  "quad",
  "camera",
  "light",
  "empty",
]);

export function buildProjectSpec(body) {
  if (body == null || typeof body !== "object" || Array.isArray(body)) {
    const error = new Error("Request body must be a JSON object.");
    error.statusCode = 400;
    throw error;
  }

  const projectName = sanitizeName(body.projectName, "BlackRoad Prototype");
  const description = sanitizeDescription(body.description);
  const author = sanitizeOptional(body.author);
  const sceneName = sanitizeSceneName(body.scene?.name ?? body.sceneName);
  const objects = normalizeObjects(body.scene?.objects ?? body.objects);

  return {
    projectName,
    description,
    author,
    sceneName,
    slug: slugify(projectName),
    objects,
  };
}

export async function exportUnityProject(spec, targetPath) {
  const scriptGuid = createGuid();
  const sceneGuid = createGuid();

  const files = [
    {
      path: "README.md",
      content: buildReadme(spec),
    },
    {
      path: "ProjectSettings/ProjectVersion.txt",
      content: buildProjectVersion(),
    },
    {
      path: "ProjectSettings/EditorBuildSettings.asset",
      content: buildEditorBuildSettings(spec.sceneName, sceneGuid),
    },
    {
      path: "Packages/manifest.json",
      content: buildManifest(),
    },
    {
      path: "Assets/Scripts/GeneratedSceneController.cs",
      content: buildSceneControllerScript(),
    },
    {
      path: "Assets/Scripts/GeneratedSceneController.cs.meta",
      content: buildScriptMeta(scriptGuid),
    },
    {
      path: `Assets/Scenes/${spec.sceneName}.unity`,
      content: buildSceneFile(spec, scriptGuid),
    },
    {
      path: `Assets/Scenes/${spec.sceneName}.unity.meta`,
      content: buildSceneMeta(sceneGuid),
    },
    {
      path: "Assets/Config/scene.plan.json",
      content: JSON.stringify(buildScenePlan(spec), null, 2) + "\n",
    },
  ];

  const zipBuffer = createZip(files);
  await writeFile(targetPath, zipBuffer);
}

function sanitizeName(raw, fallback) {
  if (typeof raw !== "string") {
    return fallback;
  }

  const trimmed = raw.trim();
  return trimmed.length > 0 ? trimmed : fallback;
}

function sanitizeDescription(raw) {
  if (typeof raw !== "string") {
    return "Generated by the BlackRoad Unity exporter stub.";
  }
  const cleaned = raw.trim().replace(/\s+/g, " ");
  return cleaned.length > 0
    ? cleaned
    : "Generated by the BlackRoad Unity exporter stub.";
}

function sanitizeOptional(raw) {
  if (typeof raw !== "string") {
    return undefined;
  }
  const trimmed = raw.trim();
  return trimmed.length > 0 ? trimmed : undefined;
}

function sanitizeSceneName(raw) {
  const fallback = "PrototypeScene";
  if (typeof raw !== "string") {
    return fallback;
  }
  const name = raw.trim().replace(/\s+/g, " ");
  if (!name) {
    return fallback;
  }

  const sanitized = name
    .replace(/[^A-Za-z0-9 _-]/g, "")
    .replace(/\s+/g, " ")
    .trim();
  return sanitized.length > 0 ? sanitized : fallback;
}

function normalizeObjects(rawObjects) {
  if (!Array.isArray(rawObjects) || rawObjects.length === 0) {
    return DEFAULT_OBJECTS;
  }

  const parsed = rawObjects
    .map((entry, index) => normalizeObject(entry, index))
    .filter(Boolean);

  return parsed.length > 0 ? parsed : DEFAULT_OBJECTS;
}

function normalizeObject(raw, index) {
  if (raw == null || typeof raw !== "object" || Array.isArray(raw)) {
    return undefined;
  }

  const name = typeof raw.name === "string" ? raw.name.trim() : "";
  const type = normalizeType(raw.type);
  const position = normalizeVector(raw.position, { x: 0, y: 0, z: 0 });
  const rotation = normalizeVector(raw.rotation, { x: 0, y: 0, z: 0 });
  const scale = normalizeVector(raw.scale, { x: 1, y: 1, z: 1 });

  return {
    name: name || `${type}-${index + 1}`,
    type,
    position,
    rotation,
    scale,
  };
}

function normalizeType(rawType) {
  if (typeof rawType !== "string") {
    return "Cube";
  }
  const normalized = rawType.trim().toLowerCase();
  if (!SUPPORTED_TYPES.has(normalized)) {
    return "Cube";
  }
  return normalized.charAt(0).toUpperCase() + normalized.slice(1);
}

function normalizeVector(raw, fallback) {
  if (raw == null || typeof raw !== "object") {
    return { ...fallback };
  }

  const pick = (key, defaultValue) =>
    typeof raw[key] === "number"
      ? clampMagnitude(raw[key])
      : defaultValue;

  return {
    x: pick("x", fallback.x),
    y: pick("y", fallback.y),
    z: pick("z", fallback.z),
  };
}

function clampMagnitude(value) {
  if (!Number.isFinite(value)) {
    return 0;
  }
  const clamped = Math.max(-10000, Math.min(10000, value));
  return Number.isInteger(clamped) ? clamped : Number(clamped.toFixed(4));
}

function slugify(input) {
  return input
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .replace(/-{2,}/g, "-")
    .slice(0, 60) || "unity-project";
}

function buildReadme(spec) {
  const lines = [
    `# ${spec.projectName}`,
    "",
    spec.description,
    "",
    "## Project structure",
    "",
    "- `Assets/Scenes` contains the generated scene definition.",
    "- `Assets/Scripts/GeneratedSceneController.cs` instantiates primitives defined in the scene plan.",
    "- `Assets/Config/scene.plan.json` is a machine-readable description of the scene objects.",
    "- `ProjectSettings/` and `Packages/` provide Unity defaults so the project opens cleanly.",
  ];

  if (spec.author) {
    lines.push("", `**Author:** ${spec.author}`);
  }

  lines.push(
    "",
    "## Scene summary",
    "",
    `Scene: ${spec.sceneName}`,
    "",
    "| Name | Type | Position (x, y, z) | Rotation (x, y, z) | Scale (x, y, z) |",
    "| --- | --- | --- | --- | --- |"
  );

  for (const objectDef of spec.objects) {
    lines.push(
      `| ${escapeTable(objectDef.name)} | ${objectDef.type} | ${formatVector(
        objectDef.position
      )} | ${formatVector(objectDef.rotation)} | ${formatVector(
        objectDef.scale
      )} |`
    );
  }

  lines.push(
    "",
    "### Bootstrapping the scene",
    "",
    "1. Open the project in Unity (2021 LTS or newer).",
    "2. Load the generated scene from `Assets/Scenes`.",
    "3. Press Play: the scene controller will instantiate the configured primitives at runtime.",
    "",
    "Edit `Assets/Config/scene.plan.json` and re-run the exporter to iterate quickly."
  );

  return lines.join("\n") + "\n";
}

function escapeTable(value) {
  return value.replace(/\|/g, "\\|");
}

function formatVector(vector) {
  const format = (num) => (Number.isInteger(num) ? num.toFixed(0) : num.toFixed(3));
  return `${format(vector.x)}, ${format(vector.y)}, ${format(vector.z)}`;
}

function buildProjectVersion() {
  return [
    "m_EditorVersion: 2022.3.0f1",
    "m_EditorVersionWithRevision: 2022.3.0f1 (5f5ebce85204)",
    "",
  ].join("\n");
}

function buildEditorBuildSettings(sceneName, sceneGuid) {
  return (
    `%YAML 1.1\n` +
    `%TAG !u! tag:unity3d.com,2011:\n` +
    `--- !u!1045 &1\n` +
    `EditorBuildSettings:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  serializedVersion: 2\n` +
    `  m_Scenes:\n` +
    `  - enabled: 1\n` +
    `    path: Assets/Scenes/${sceneName}.unity\n` +
    `    guid: ${sceneGuid}\n` +
    `  m_configObjects: {}\n`
  );
}

function buildManifest() {
  const manifest = {
    dependencies: {
      "com.unity.collab-proxy": "1.17.7",
      "com.unity.ide.rider": "3.0.24",
      "com.unity.ide.visualstudio": "2.0.22",
      "com.unity.ide.vscode": "1.2.5",
      "com.unity.test-framework": "1.3.7",
      "com.unity.textmeshpro": "3.0.6",
      "com.unity.timeline": "1.7.5",
      "com.unity.ugui": "1.0.0",
      "com.unity.modules.ai": "1.0.0",
      "com.unity.modules.androidjni": "1.0.0",
      "com.unity.modules.animation": "1.0.0",
      "com.unity.modules.audio": "1.0.0",
      "com.unity.modules.cloth": "1.0.0",
      "com.unity.modules.director": "1.0.0",
      "com.unity.modules.imageconversion": "1.0.0",
      "com.unity.modules.imgui": "1.0.0",
      "com.unity.modules.jsonserialize": "1.0.0",
      "com.unity.modules.particlesystem": "1.0.0",
      "com.unity.modules.physics": "1.0.0",
      "com.unity.modules.physics2d": "1.0.0",
      "com.unity.modules.screencapture": "1.0.0",
      "com.unity.modules.terrain": "1.0.0",
      "com.unity.modules.terrainphysics": "1.0.0",
      "com.unity.modules.tilemap": "1.0.0",
      "com.unity.modules.ui": "1.0.0",
      "com.unity.modules.uielements": "1.0.0",
      "com.unity.modules.umbra": "1.0.0",
      "com.unity.modules.unityanalytics": "1.0.0",
      "com.unity.modules.unitywebrequest": "1.0.0",
      "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
      "com.unity.modules.unitywebrequestaudio": "1.0.0",
      "com.unity.modules.unitywebrequesttexture": "1.0.0",
      "com.unity.modules.unitywebrequestwww": "1.0.0",
      "com.unity.modules.vehicles": "1.0.0",
      "com.unity.modules.video": "1.0.0",
      "com.unity.modules.vr": "1.0.0",
      "com.unity.modules.wind": "1.0.0",
      "com.unity.modules.xr": "1.0.0",
    },
  };

  return JSON.stringify(manifest, null, 2) + "\n";
}

function buildSceneControllerScript() {
  return `using System;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n` +
    "/// <summary>\n" +
    "/// Runtime scene bootstrapper generated by the BlackRoad Unity exporter.\n" +
    "/// It instantiates simple primitives defined in the scene plan so designers\n" +
    "/// can iterate without writing boilerplate.\n" +
    "/// </summary>\n" +
    "public class GeneratedSceneController : MonoBehaviour\n" +
    "{\n" +
    "    [Serializable]\n" +
    "    public class SceneObjectDefinition\n" +
    "    {\n" +
    "        public string name;\n" +
    "        public string type = \"Cube\";\n" +
    "        public Vector3 position = Vector3.zero;\n" +
    "        public Vector3 rotation = Vector3.zero;\n" +
    "        public Vector3 scale = Vector3.one;\n" +
    "    }\n\n" +
    "    [Tooltip(\"Objects instantiated at runtime when the scene loads.\")]\n" +
    "    public List<SceneObjectDefinition> objects = new();\n\n" +
    "    private void Start()\n" +
    "    {\n" +
    "        foreach (var entry in objects)\n" +
    "        {\n" +
    "            if (entry == null)\n" +
    "            {\n" +
    "                continue;\n" +
    "            }\n\n" +
    "            var instance = CreatePrimitive(entry.type);\n" +
    "            var resolvedName = string.IsNullOrWhiteSpace(entry.name) ? entry.type : entry.name;\n" +
    "            instance.name = resolvedName;\n" +
    "            instance.transform.SetParent(transform, false);\n" +
    "            instance.transform.localPosition = entry.position;\n" +
    "            instance.transform.localEulerAngles = entry.rotation;\n" +
    "            instance.transform.localScale = entry.scale;\n" +
    "        }\n" +
    "    }\n\n" +
    "    private GameObject CreatePrimitive(string requestedType)\n" +
    "    {\n" +
    "        if (string.IsNullOrWhiteSpace(requestedType))\n" +
    "        {\n" +
    "            return GameObject.CreatePrimitive(PrimitiveType.Cube);\n" +
    "        }\n\n" +
    "        switch (requestedType.Trim().ToLowerInvariant())\n" +
    "        {\n" +
    "            case \"sphere\":\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Sphere);\n" +
    "            case \"capsule\":\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Capsule);\n" +
    "            case \"cylinder\":\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Cylinder);\n" +
    "            case \"plane\":\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Plane);\n" +
    "            case \"quad\":\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Quad);\n" +
    "            case \"light\":\n" +
    "            {\n" +
    "                var lightObject = new GameObject(\"Generated Light\");\n" +
    "                lightObject.AddComponent<Light>();\n" +
    "                return lightObject;\n" +
    "            }\n" +
    "            case \"camera\":\n" +
    "            {\n" +
    "                var cameraObject = new GameObject(\"Generated Camera\");\n" +
    "                cameraObject.AddComponent<Camera>();\n" +
    "                cameraObject.AddComponent<AudioListener>();\n" +
    "                return cameraObject;\n" +
    "            }\n" +
    "            case \"empty\":\n" +
    "                return new GameObject(\"Generated Empty\");\n" +
    "            case \"cube\":\n" +
    "            default:\n" +
    "                return GameObject.CreatePrimitive(PrimitiveType.Cube);\n" +
    "        }\n" +
    "    }\n" +
    "}\n";
}

function buildScriptMeta(guid) {
  return [
    "fileFormatVersion: 2",
    `guid: ${guid}`,
    "MonoImporter:",
    "  externalObjects: {}",
    "  serializedVersion: 2",
    "  defaultReferences: []",
    "  executionOrder: 0",
    "  icon: {fileID: 0}",
    "  userData:",
    "  assetBundleName:",
    "  assetBundleVariant:",
    "",
  ].join("\n");
}

function buildSceneFile(spec, scriptGuid) {
  const now = new Date();
  const timestamp = now.toISOString();
  const objectsYaml = spec.objects
    .map((object) =>
      [
        "  - name: " + yamlString(object.name),
        "    type: " + yamlString(object.type),
        "    position: {x: " + numberLiteral(object.position.x) + ", y: " + numberLiteral(object.position.y) + ", z: " + numberLiteral(object.position.z) + "}",
        "    rotation: {x: " + numberLiteral(object.rotation.x) + ", y: " + numberLiteral(object.rotation.y) + ", z: " + numberLiteral(object.rotation.z) + "}",
        "    scale: {x: " + numberLiteral(object.scale.x) + ", y: " + numberLiteral(object.scale.y) + ", z: " + numberLiteral(object.scale.z) + "}",
      ].join("\n")
    )
    .join("\n");
  const objectsBlock =
    spec.objects.length > 0 ? `  objects:\n${objectsYaml}\n` : "  objects: []\n";

  return (
    `%YAML 1.1\n` +
    `%TAG !u! tag:unity3d.com,2011:\n` +
    `--- !u!29 &1\n` +
    `OcclusionCullingSettings:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  serializedVersion: 2\n` +
    `  m_OcclusionBakeSettings:\n` +
    `    smallestOccluder: 5\n` +
    `    smallestHole: 0.25\n` +
    `    backfaceThreshold: 100\n` +
    `  m_SceneGUID: 00000000000000000000000000000000\n` +
    `  m_OcclusionCullingData: {fileID: 0}\n` +
    `--- !u!104 &2\n` +
    `RenderSettings:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  serializedVersion: 9\n` +
    `  m_Fog: 0\n` +
    `  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}\n` +
    `  m_FogMode: 3\n` +
    `  m_FogDensity: 0.01\n` +
    `  m_LinearFogStart: 0\n` +
    `  m_LinearFogEnd: 300\n` +
    `  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}\n` +
    `  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}\n` +
    `  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}\n` +
    `  m_AmbientIntensity: 1\n` +
    `  m_AmbientMode: 0\n` +
    `  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}\n` +
    `  m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}\n` +
    `  m_HaloStrength: 0.5\n` +
    `  m_FlareStrength: 1\n` +
    `  m_FlareFadeSpeed: 3\n` +
    `  m_HaloTexture: {fileID: 0}\n` +
    `  m_SpotCookie: {fileID: 0}\n` +
    `  m_DefaultReflectionMode: 0\n` +
    `  m_DefaultReflectionResolution: 128\n` +
    `  m_ReflectionBounces: 1\n` +
    `  m_ReflectionIntensity: 1\n` +
    `  m_CustomReflection: {fileID: 0}\n` +
    `  m_Sun: {fileID: 0}\n` +
    `  m_IndirectSpecularColor: {r: 0, g: 0, b: 0, a: 1}\n` +
    `  m_UseRadianceAmbientProbe: 0\n` +
    `--- !u!157 &3\n` +
    `LightmapSettings:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  serializedVersion: 12\n` +
    `  m_GIWorkflowMode: 1\n` +
    `  m_GISettings:\n` +
    `    serializedVersion: 2\n` +
    `    m_BounceScale: 1\n` +
    `    m_IndirectOutputScale: 1\n` +
    `    m_AlbedoBoost: 1\n` +
    `    m_TemporalCoherenceThreshold: 1\n` +
    `    m_EnvironmentLightingMode: 0\n` +
    `    m_EnableBakedLightmaps: 1\n` +
    `    m_EnableRealtimeLightmaps: 0\n` +
    `  m_LightmapEditorSettings:\n` +
    `    serializedVersion: 12\n` +
    `    m_Resolution: 2\n` +
    `    m_BakeResolution: 40\n` +
    `    m_AtlasSize: 1024\n` +
    `    m_AO: 0\n` +
    `    m_AOMaxDistance: 1\n` +
    `    m_CompAOExponent: 1\n` +
    `    m_CompAOExponentDirect: 0\n` +
    `    m_ExtractAmbientOcclusion: 0\n` +
    `    m_Padding: 2\n` +
    `    m_LightmapParameters: {fileID: 0}\n` +
    `    m_LightmapsBakeMode: 1\n` +
    `    m_TextureCompression: 1\n` +
    `    m_FinalGather: 0\n` +
    `    m_FinalGatherFiltering: 1\n` +
    `    m_FinalGatherRayCount: 256\n` +
    `    m_ReflectionCompression: 2\n` +
    `    m_MixedBakeMode: 2\n` +
    `    m_BakeBackend: 1\n` +
    `    m_PVRSampling: 1\n` +
    `    m_PVRDirectSampleCount: 32\n` +
    `    m_PVRSampleCount: 512\n` +
    `    m_PVRBounces: 2\n` +
    `    m_PVRMinBounces: 1\n` +
    `    m_PVRFilterTypeDirect: 0\n` +
    `    m_PVRFilterTypeIndirect: 0\n` +
    `    m_PVRFilterTypeAO: 0\n` +
    `    m_PVRFilteringMode: 1\n` +
    `    m_PVRCulling: 1\n` +
    `    m_PVRFilteringGaussRadiusDirect: 1\n` +
    `    m_PVRFilteringGaussRadiusIndirect: 5\n` +
    `    m_PVRFilteringGaussRadiusAO: 2\n` +
    `    m_PVRFilteringAtrousPositionSigmaDirect: 0.5\n` +
    `    m_PVRFilteringAtrousPositionSigmaIndirect: 2\n` +
    `    m_PVRFilteringAtrousPositionSigmaAO: 1\n` +
    `    m_ShowResolutionOverlay: 1\n` +
    `    m_ExportTrainingData: 0\n` +
    `    m_TrainingDataDestination: 0\n` +
    `  m_LightingDataAsset: {fileID: 0}\n` +
    `  m_LightingSettings: {fileID: 0}\n` +
    `--- !u!196 &4\n` +
    `NavMeshSettings:\n` +
    `  serializedVersion: 2\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_BuildSettings:\n` +
    `    serializedVersion: 2\n` +
    `    agentTypeID: 0\n` +
    `    agentRadius: 0.5\n` +
    `    agentHeight: 2\n` +
    `    agentSlope: 45\n` +
    `    agentClimb: 0.4\n` +
    `    ledgeDropHeight: 0\n` +
    `    maxJumpAcrossDistance: 0\n` +
    `    minRegionArea: 2\n` +
    `    manualCellSize: 0\n` +
    `    cellSize: 0.16666667\n` +
    `    manualTileSize: 0\n` +
    `    tileSize: 256\n` +
    `    accuratePlacement: 0\n` +
    `    maxJobWorkers: 0\n` +
    `    preserveTilesOutsideBounds: 0\n` +
    `    debug:\n` +
    `      m_Flags: 0\n` +
    `  m_NavMeshData: {fileID: 0}\n` +
    `--- !u!1 &1000\n` +
    `GameObject:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  serializedVersion: 6\n` +
    `  m_Component:\n` +
    `  - component: {fileID: 1001}\n` +
    `  - component: {fileID: 11400000}\n` +
    `  m_Layer: 0\n` +
    `  m_Name: Scene Controller\n` +
    `  m_TagString: Untagged\n` +
    `  m_Icon: {fileID: 0}\n` +
    `  m_NavMeshLayer: 0\n` +
    `  m_StaticEditorFlags: 0\n` +
    `  m_IsActive: 1\n` +
    `--- !u!4 &1001\n` +
    `Transform:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 1000}\n` +
    `  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}\n` +
    `  m_LocalPosition: {x: 0, y: 0, z: 0}\n` +
    `  m_LocalScale: {x: 1, y: 1, z: 1}\n` +
    `  m_ConstrainProportionsScale: 0\n` +
    `  m_Children: []\n` +
    `  m_Father: {fileID: 0}\n` +
    `  m_RootOrder: 0\n` +
    `  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}\n` +
    `--- !u!114 &11400000\n` +
    `MonoBehaviour:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 1000}\n` +
    `  m_Enabled: 1\n` +
    `  m_EditorHideFlags: 0\n` +
    `  m_Script: {fileID: 11500000, guid: ${scriptGuid}, type: 3}\n` +
    `  m_Name:\n` +
    `  m_EditorClassIdentifier:\n` +
    objectsBlock +
    `--- !u!1 &2000\n` +
    `GameObject:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  serializedVersion: 6\n` +
    `  m_Component:\n` +
    `  - component: {fileID: 2001}\n` +
    `  - component: {fileID: 2002}\n` +
    `  - component: {fileID: 2003}\n` +
    `  m_Layer: 0\n` +
    `  m_Name: Main Camera\n` +
    `  m_TagString: MainCamera\n` +
    `  m_Icon: {fileID: 0}\n` +
    `  m_NavMeshLayer: 0\n` +
    `  m_StaticEditorFlags: 0\n` +
    `  m_IsActive: 1\n` +
    `--- !u!4 &2001\n` +
    `Transform:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 2000}\n` +
    `  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}\n` +
    `  m_LocalPosition: {x: 0, y: 1, z: -10}\n` +
    `  m_LocalScale: {x: 1, y: 1, z: 1}\n` +
    `  m_ConstrainProportionsScale: 0\n` +
    `  m_Children: []\n` +
    `  m_Father: {fileID: 0}\n` +
    `  m_RootOrder: 1\n` +
    `  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}\n` +
    `--- !u!20 &2002\n` +
    `Camera:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 2000}\n` +
    `  m_Enabled: 1\n` +
    `  serializedVersion: 2\n` +
    `  m_ClearFlags: 1\n` +
    `  m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}\n` +
    `  m_projectionMatrixMode: 1\n` +
    `  m_GateFitMode: 2\n` +
    `  m_FOVAxisMode: 0\n` +
    `  m_SensorSize: {x: 36, y: 24}\n` +
    `  m_LensShift: {x: 0, y: 0}\n` +
    `  m_FocalLength: 50\n` +
    `  m_NormalizedViewPortRect:\n` +
    `    serializedVersion: 2\n` +
    `    x: 0\n` +
    `    y: 0\n` +
    `    width: 1\n` +
    `    height: 1\n` +
    `  near clip plane: 0.3\n` +
    `  far clip plane: 1000\n` +
    `  field of view: 60\n` +
    `  orthographic: 0\n` +
    `  orthographic size: 5\n` +
    `  m_Depth: -1\n` +
    `  m_CullingMask:\n` +
    `    serializedVersion: 2\n` +
    `    m_Bits: 4294967295\n` +
    `  m_RenderingPath: -1\n` +
    `  m_TargetTexture: {fileID: 0}\n` +
    `  m_TargetDisplay: 0\n` +
    `  m_TargetEye: 3\n` +
    `  m_HDR: 1\n` +
    `  m_AllowMSAA: 1\n` +
    `  m_AllowDynamicResolution: 0\n` +
    `  m_ForceIntoRT: 0\n` +
    `  m_OcclusionCulling: 1\n` +
    `  m_StereoConvergence: 10\n` +
    `  m_StereoSeparation: 0.022\n` +
    `--- !u!81 &2003\n` +
    `AudioListener:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 2000}\n` +
    `  m_Enabled: 1\n` +
    `--- !u!1 &3000\n` +
    `GameObject:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  serializedVersion: 6\n` +
    `  m_Component:\n` +
    `  - component: {fileID: 3001}\n` +
    `  - component: {fileID: 3002}\n` +
    `  m_Layer: 0\n` +
    `  m_Name: Directional Light\n` +
    `  m_TagString: Untagged\n` +
    `  m_Icon: {fileID: 0}\n` +
    `  m_NavMeshLayer: 0\n` +
    `  m_StaticEditorFlags: 0\n` +
    `  m_IsActive: 1\n` +
    `--- !u!4 &3001\n` +
    `Transform:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 3000}\n` +
    `  m_LocalRotation: {x: 0.40821788, y: -0.23456968, z: 0.10938163, w: 0.8754261}\n` +
    `  m_LocalPosition: {x: 0, y: 3, z: 0}\n` +
    `  m_LocalScale: {x: 1, y: 1, z: 1}\n` +
    `  m_ConstrainProportionsScale: 0\n` +
    `  m_Children: []\n` +
    `  m_Father: {fileID: 0}\n` +
    `  m_RootOrder: 2\n` +
    `  m_LocalEulerAnglesHint: {x: 50, y: -30, z: 0}\n` +
    `--- !u!108 &3002\n` +
    `Light:\n` +
    `  m_ObjectHideFlags: 0\n` +
    `  m_CorrespondingSourceObject: {fileID: 0}\n` +
    `  m_PrefabInstance: {fileID: 0}\n` +
    `  m_PrefabAsset: {fileID: 0}\n` +
    `  m_GameObject: {fileID: 3000}\n` +
    `  m_Enabled: 1\n` +
    `  serializedVersion: 10\n` +
    `  m_Type: 1\n` +
    `  m_Shape: 0\n` +
    `  m_Color: {r: 1, g: 0.95686275, b: 0.8392157, a: 1}\n` +
    `  m_Intensity: 1\n` +
    `  m_Range: 10\n` +
    `  m_SpotAngle: 30\n` +
    `  m_InnerSpotAngle: 21.80208\n` +
    `  m_CookieSize: 10\n` +
    `  m_Shadows:\n` +
    `    m_Type: 2\n` +
    `    m_Resolution: -1\n` +
    `    m_CustomResolution: -1\n` +
    `    m_Strength: 1\n` +
    `    m_Bias: 0.05\n` +
    `    m_NormalBias: 0.4\n` +
    `    m_NearPlane: 0.2\n` +
    `  m_Cookie: {fileID: 0}\n` +
    `  m_DrawHalo: 0\n` +
    `  m_Flare: {fileID: 0}\n` +
    `  m_RenderMode: 0\n` +
    `  m_CullingMask:\n` +
    `    serializedVersion: 2\n` +
    `    m_Bits: 4294967295\n` +
    `  m_Lightmapping: 1\n` +
    `  m_LightShadowCasterMode: 0\n` +
    `  m_AreaSize: {x: 1, y: 1}\n` +
    `  m_BounceIntensity: 1\n` +
    `  m_ColorTemperature: 6570\n` +
    `  m_UseColorTemperature: 0\n` +
    `  m_BoundingSphereOverride: {x: 0, y: 0, z: 0, w: 0}\n` +
    `  m_UseBoundingSphereOverride: 0\n` +
    `  m_InnerSpotAngle: 21.80208\n` +
    `  m_CullingMatrixOverride: {e00: 1, e01: 0, e02: 0, e03: 0, e10: 0, e11: 1, e12: 0, e13: 0, e20: 0, e21: 0, e22: 1, e23: 0, e30: 0, e31: 0, e32: 0, e33: 1}\n` +
    `  m_UseCullingMatrixOverride: 0\n` +
    `  m_RenderingLayerMask: 1\n` +
    `  m_LightLayerMask: 1\n` +
    `  m_LightmappingSamples: 4\n` +
    `  m_LightmapBakeType: 1\n` +
    `  m_LightProbeUsage: 1\n` +
    `  m_LightProbeVolumeOverride: {fileID: 0}\n` +
    `  m_ShadowsShadowMaskMode: 0\n` +
    `  m_MixedLightingMode: 2\n` +
    `  m_UseScreenSpaceShadows: 0\n` +
    `  m_ShadowRadius: 0\n` +
    `  m_ShadowAngle: 0\n` +
    `  m_SoftShadowQuality: 3\n` +
    `  m_ContactShadows: 0\n` +
    `  m_SpotCookie: {fileID: 0}\n` +
    `# Scene generated at ${timestamp}\n`
  );
}

function buildSceneMeta(guid) {
  return [
    "fileFormatVersion: 2",
    `guid: ${guid}`,
    "DefaultImporter:",
    "  externalObjects: {}",
    "  userData:",
    "  assetBundleName:",
    "  assetBundleVariant:",
    "",
  ].join("\n");
}

function buildScenePlan(spec) {
  return {
    project: spec.projectName,
    description: spec.description,
    scene: {
      name: spec.sceneName,
      objects: spec.objects,
    },
  };
}

function yamlString(value) {
  return JSON.stringify(value ?? "");
}

function numberLiteral(value) {
  return Number.isInteger(value) ? value.toFixed(0) : value.toFixed(4);
}

function createGuid() {
  return crypto.randomBytes(16).toString("hex");
}

function getMsDosDateTime(date) {
  const year = Math.max(1980, Math.min(2107, date.getFullYear()));
  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = Math.floor(date.getSeconds() / 2);

  const dosTime = (hours << 11) | (minutes << 5) | seconds;
  const dosDate = ((year - 1980) << 9) | (month << 5) | day;
  return { time: dosTime, date: dosDate };
}

function createZip(files) {
  const now = new Date();
  const { time, date } = getMsDosDateTime(now);

  let offset = 0;
  const localParts = [];
  const centralParts = [];

  for (const file of files) {
    const name = file.path.replace(/\\/g, "/");
    const nameBuffer = Buffer.from(name, "utf8");
    const contentBuffer =
      typeof file.content === "string"
        ? Buffer.from(file.content, "utf8")
        : Buffer.from(file.content);
    const crc = crc32(contentBuffer);
    const size = contentBuffer.length;

    const localHeader = Buffer.alloc(30);
    localHeader.writeUInt32LE(0x04034b50, 0);
    localHeader.writeUInt16LE(20, 4);
    localHeader.writeUInt16LE(0, 6);
    localHeader.writeUInt16LE(0, 8);
    localHeader.writeUInt16LE(time, 10);
    localHeader.writeUInt16LE(date, 12);
    localHeader.writeUInt32LE(crc, 14);
    localHeader.writeUInt32LE(size, 18);
    localHeader.writeUInt32LE(size, 22);
    localHeader.writeUInt16LE(nameBuffer.length, 26);
    localHeader.writeUInt16LE(0, 28);

    localParts.push(localHeader, nameBuffer, contentBuffer);

    const centralHeader = Buffer.alloc(46);
    centralHeader.writeUInt32LE(0x02014b50, 0);
    centralHeader.writeUInt16LE(20, 4);
    centralHeader.writeUInt16LE(20, 6);
    centralHeader.writeUInt16LE(0, 8);
    centralHeader.writeUInt16LE(0, 10);
    centralHeader.writeUInt16LE(time, 12);
    centralHeader.writeUInt16LE(date, 14);
    centralHeader.writeUInt32LE(crc, 16);
    centralHeader.writeUInt32LE(size, 20);
    centralHeader.writeUInt32LE(size, 24);
    centralHeader.writeUInt16LE(nameBuffer.length, 28);
    centralHeader.writeUInt16LE(0, 30);
    centralHeader.writeUInt16LE(0, 32);
    centralHeader.writeUInt16LE(0, 34);
    centralHeader.writeUInt16LE(0, 36);
    centralHeader.writeUInt32LE(0, 38);
    centralHeader.writeUInt32LE(offset, 42);

    centralParts.push(centralHeader, nameBuffer);

    offset += localHeader.length + nameBuffer.length + contentBuffer.length;
  }

  const fileData = Buffer.concat(localParts);
  const centralData = Buffer.concat(centralParts);

  const footer = Buffer.alloc(22);
  footer.writeUInt32LE(0x06054b50, 0);
  footer.writeUInt16LE(0, 4);
  footer.writeUInt16LE(0, 6);
  footer.writeUInt16LE(files.length, 8);
  footer.writeUInt16LE(files.length, 10);
  footer.writeUInt32LE(centralData.length, 12);
  footer.writeUInt32LE(fileData.length, 16);
  footer.writeUInt16LE(0, 20);

  return Buffer.concat([fileData, centralData, footer]);
}

const CRC_TABLE = (() => {
  const table = new Uint32Array(256);
  for (let i = 0; i < 256; i += 1) {
    let c = i;
    for (let k = 0; k < 8; k += 1) {
      if ((c & 1) !== 0) {
        c = 0xedb88320 ^ (c >>> 1);
      } else {
        c >>>= 1;
      }
    }
    table[i] = c >>> 0;
  }
  return table;
})();

function crc32(buffer) {
  let crc = -1;
  for (let i = 0; i < buffer.length; i += 1) {
    crc = (crc >>> 8) ^ CRC_TABLE[(crc ^ buffer[i]) & 0xff];
  }
  return (crc ^ -1) >>> 0;
}

