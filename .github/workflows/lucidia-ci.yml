name: Lucidia CI
on:
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  actions: read
  pull-requests: read

concurrency:
  group: lucidia-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ❗️ Your real build/test steps go here
      - run: echo "Run Lucidia build/tests here"

      - name: Main Branch Check (local)
        uses: ./.github/actions/main-branch-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          main_branch: main
          recency_days: 7

name: lucidia-ci
name: Lucidia Cognitive System CI/CD

on:
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  actions: read
  pull-requests: read

concurrency:
  group: lucidia-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ❗️ Your real build/test steps go here
      - run: echo "Run Lucidia build/tests here"

      - name: Main Branch Check (local)
        uses: ./.github/actions/main-branch-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          main_branch: main
          recency_days: 7

name: Lucidia Cognitive System CI/CD

on:
  push:
    branches: [ "main", "develop", "feature/**" ]
  pull_request:
    branches: [ "main", "develop" ]
  release:
    types: [ published ]
  schedule:
    - cron: "0 2 * * 1"   # Mondays 02:00 UTC weekly security audit
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read  # job-level blocks will elevate as needed

jobs:

  # ---------- Code Quality & Security ----------
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      actions: read
      security-events: write  # for CodeQL & SARIF uploads
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Prettier
        run: npx prettier --check "src/**/*.{js,mjs,json}"

      - name: ESLint
        run: npm run lint
        continue-on-error: true

      - name: npm audit (non-blocking)
        run: npm audit --audit-level=moderate || true

      - name: Snyk (non-blocking)
        uses: snyk/actions/node@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
        continue-on-error: true

      # Dependency review only on PRs
      - name: Dependency Review (PR)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

      # Optional: secret scanning with Gitleaks (orgs need license)
      - name: Gitleaks (non-blocking)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # if org repo
        continue-on-error: true

      # CodeQL (JS/TS)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ---------- Tests ----------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
    services:
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 20
      mongo:
        image: mongo:7
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval 5s --health-timeout 5s --health-retries 30
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lucidia_test
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres -d lucidia_test"
          --health-interval 5s --health-timeout 5s --health-retries 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci --prefer-offline --no-audit

      - name: Unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Integration tests
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          MONGO_URL: mongodb://localhost:27017/lucidia_test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lucidia_test
        run: npm run test:integration

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }} # required for private repos

  # ---------- Build & Push Docker ----------
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    timeout-minutes: 40
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha  # adds :<sha>
          labels: |
            org.opencontainers.image.title=Lucidia
            org.opencontainers.image.source=${{ github.repository }}

      - name: Build & push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Smoke test container
        run: |
          docker run --rm -d --name lucidia-test \
            -p 8000:8000 \
            -e NODE_ENV=test \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          for i in {1..30}; do
            curl -fsS http://localhost:8000/health && ok=1 && break || true
            sleep 2
          done
          test "${ok:-}" = "1"
          docker stop lucidia-test

  # ---------- Performance ----------
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --prefer-offline --no-audit
      - run: npm run benchmark
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results.json
          retention-days: 14

  # ---------- Infra as Code Validation ----------
  infrastructure-check:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Validate Compose
        run: docker compose config
      - name: Check NGINX configuration
        run: |
          docker run --rm -v "$PWD/nginx:/etc/nginx:ro" nginx:alpine nginx -t
      - name: Setup Terraform
        if: hashFiles('**/*.tf') != ''
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform fmt
        if: hashFiles('**/*.tf') != ''
        run: terraform fmt -check
      - name: Terraform validate
        if: hashFiles('**/*.tf') != ''
        run: terraform validate

  # ---------- Deploy to Staging ----------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker-build, infrastructure-check]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.blackroad.io
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Deploy
        run: |
          echo "Deploying to staging..."
          # kubectl apply -f k8s/staging/
          # docker compose -f docker-compose.staging.yml up -d
      - name: Smoke tests (staging)
        run: |
          sleep 60
          npm run test:smoke -- --baseUrl=https://staging.blackroad.io
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ---------- Deploy to Production ----------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, performance-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://blackroad.io
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write  # for OIDC to AWS
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.28.0
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: lucidia-deploy-${{ github.run_id }}
      - name: Deploy
        run: |
          echo "Deploying to production..."
          # kubectl apply -f k8s/production/
          # aws ecs update-service --cluster lucidia --service lucidia-service --force-new-deployment
      - name: Health checks
        run: |
          sleep 120
          curl -f https://blackroad.io/health
          curl -f https://blackroadinc.us/health
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Lucidia deployed to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ---------- Scheduled Security Scan ----------
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 25
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif
      - name: Upload FS SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Trivy image scan (latest)
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          image-ref: "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          format: sarif
          output: docker-trivy-results.sarif
      - name: Upload image SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: docker-trivy-results.sarif

  # ---------- Cleanup ----------
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 6
      - name: Cleanup note
        run: echo "Consider adding GHCR image retention rules for cleanup."
