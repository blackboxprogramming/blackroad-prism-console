name: ChatOps: Cache
on: { issue_comment: { types: [created] } }
permissions: { pull-requests: write }
jobs:
  cache:
    if: startsWith(github.event.comment.body, '/cache ')
    runs-on: ubuntu-latest
    steps:
      - id: parse
        run: |
          raw="${{ github.event.comment.body }}"
          subcmd=$(echo "$raw" | awk '{print $2}')
          echo "subcmd=$subcmd" >> $GITHUB_OUTPUT
      - name: Purge Cloudflare (if configured)
        if: steps.parse.outputs.subcmd == 'purge'
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
        run: |
          if [ -n "$CF_API_TOKEN" ] && [ -n "$CF_ZONE_ID" ]; then
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" \
              --data '{"purge_everything":true}' && echo "Cloudflare cache purged."
          else
            echo "Cloudflare not configured; skipping."
          fi
      - name: Warm Cache (dispatch warm+shot)
        if: steps.parse.outputs.subcmd == 'warm'
        uses: actions/github-script@v7
        with:
          script: |
            await github.actions.createWorkflowDispatch({owner: context.repo.owner, repo: context.repo.repo, workflow_id: 'cache-warm-shot.yml', ref: context.payload.repository.default_branch});
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body:'ðŸ”¥ Warm job dispatched.'});
      - name: Acknowledge
        uses: actions/github-script@v7
        with:
          script: |
            const raw = context.payload.comment.body;
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body:`Cache command acknowledged: \`${raw}\``});
