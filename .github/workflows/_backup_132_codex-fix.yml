name: AI Fix â€” Codex/LLM Agent
on:
  workflow_dispatch:
    inputs:
      prompt_file: { description: "Prompt markdown path", required: true, default: ".github/prompts/codex-fix-anything.md" }
      branch: { description: "Working branch", required: true, default: "ai-fix" }
permissions:
  contents: write
  pull-requests: write
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with: { fetch-depth: 0 }
      - name: Create working branch
        run: |
          git checkout -b "${{ inputs.branch }}" || git checkout "${{ inputs.branch }}"
      - name: Run installer (best-effort)
        run: bash scripts/install-all.sh || true
      - name: Prepare prompt bundle
        run: |
          mkdir -p .github/prompts_out
          echo "COLLECTING CONTEXTâ€¦" > .github/prompts_out/context.txt
          echo "## Repo tree (depth 2)" >> .github/prompts_out/context.txt
          ls -R | sed -n '1,400p' >> .github/prompts_out/context.txt || true
          echo "\n## Package manifests" >> .github/prompts_out/context.txt
          (cat package.json 2>/dev/null; echo; cat sites/blackroad/package.json 2>/dev/null) >> .github/prompts_out/context.txt || true
      - name: Invoke LLM (OpenAI or Ollama)
        id: llm
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}
        run: |
          node -e "
            const fs=require('fs');
            const prompt=fs.readFileSync(process.env.GITHUB_WORKSPACE + '/${{ inputs.prompt_file }}','utf8') + '\n\n---\n\n' + fs.readFileSync('.github/prompts_out/context.txt','utf8');
            fs.writeFileSync('.github/prompts_out/final_prompt.txt', prompt);
          "
          # If you run Codex externally, this step is a no-op placeholder.
          echo 'LLM placeholder complete' > .github/prompts_out/llm.txt
      - name: Auto-format & lint
        run: |
          npm run -s format || true
          npm run -s lint || true
          (cd sites/blackroad && npm run -s build) || true
      - name: Commit changes (if any)
        env: { GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }} }
        run: |
          git add -A
          git diff --staged --quiet || (git config user.name "${{ secrets.BOT_USER || 'blackroad-bot' }}"; git config user.email "${{ secrets.BOT_USER || 'blackroad-bot' }}@users.noreply.github.com"; git commit -m "ai: automated fix pass"; git push -u origin "${{ inputs.branch }}" || true)
      - name: Open/Update PR
        uses: actions/github-script@v7
        with:
          script: |
            const head='${{ inputs.branch }}'; const base='${{ github.ref_name }}' || 'main';
            const {data: prs} = await github.pulls.list({owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${head}`, state:'open'});
            if (prs.length) {
              await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: prs[0].number, body: 'ðŸ¤– AI fix pass updated.'});
            } else {
              const {data: pr} = await github.pulls.create({owner: context.repo.owner, repo: context.repo.repo, head, base, title: 'ðŸ¤– AI Fix Pass', body: 'Automated fixes via Codex/LLM agent.'});
              await github.issues.addLabels({owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number, labels: ['ai-fix','automerge-candidate']});
            }
