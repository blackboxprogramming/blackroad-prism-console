name: ChatOps: Ask Agent
on: { issue_comment: { types: [created] } }
permissions: { pull-requests: write, contents: read, issues: write }
jobs:
  ask:
    if: startsWith(github.event.comment.body, '/ask ')
    runs-on: ubuntu-latest
    steps:
      - name: Answer with AI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}
          PROMPT: ${{ github.event.comment.body }}
        uses: actions/github-script@v7
        with:
          script: |
            const text = process.env.PROMPT.replace(/^\/ask\s+/,'').trim();
            const hasOpenAI = !!process.env.OPENAI_API_KEY;
            const hasOllama = !!process.env.OLLAMA_HOST;
            let answer = null;
            async function callOpenAI(q){
              const r = await fetch('https://api.openai.com/v1/chat/completions',{
                method:'POST',
                headers:{'Authorization':'Bearer '+process.env.OPENAI_API_KEY,'Content-Type':'application/json'},
                body: JSON.stringify({ model:'gpt-4o-mini', temperature:0.3, messages:[{role:'user', content:q}] })
              });
              const j = await r.json(); return j.choices?.[0]?.message?.content || null;
            }
            async function callOllama(q){
              const host = process.env.OLLAMA_HOST?.replace(/\/$/,'');
              const r = await fetch(`${host}/api/chat`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ model:'llama3', messages:[{role:'user', content:text}], stream:false })});
              const j = await r.json(); return j.message?.content || j.choices?.[0]?.message?.content || null;
            }
            if (hasOpenAI) answer = await callOpenAI(text);
            else if (hasOllama) answer = await callOllama(text);
            else answer = "_(No model configured; please add OPENAI_API_KEY or OLLAMA_HOST secrets.)_";
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body: `**Agent Reply**:\n\n${answer}`});
