name: AI Review
on: { pull_request: { types: [opened, synchronize, reopened] } }
jobs:
  ai_review:
    permissions: { pull-requests: write, contents: read }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gather context
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff origin/${{ github.base_ref }}... > diff.patch
          echo "## DIFF" && wc -l diff.patch
      - name: Run reviewer (local or API)
        env:
          REVIEW_ENDPOINT: ${{ secrets.REVIEW_ENDPOINT }}  # e.g., http://ollama:11434/v1
          REVIEW_MODEL: ${{ secrets.REVIEW_MODEL }}        # e.g., phi, llama3, gpt-*
        run: |
          python - << 'PY'
import os, json, requests
diff = open("diff.patch","r",encoding="utf8").read()[:150000]
prompt = {
  "role":"system",
  "content":"You are a senior code reviewer. Return STRICT JSON with 'risks', 'missing_tests', 'suggested_patches' (unified diff), 'notes'."
}
user = {"role":"user","content": diff}
url = os.environ["REVIEW_ENDPOINT"].rstrip("/") + "/chat/completions"
payload = {"model": os.environ.get("REVIEW_MODEL","gpt-4o"), "messages":[prompt,user], "temperature":0}
resp = requests.post(url, json=payload, timeout=120)
resp.raise_for_status()
out = resp.json()
text = out.get("choices",[{}])[0].get("message",{}).get("content","{}")
open("review.json","w",encoding="utf8").write(text)
print(text[:500])
PY
      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ai-review
          message: |
            ðŸ¤– **AI Review Summary**
            ```json
            ${{ steps.ai_review.outputs.content }}
            ```
          recreate: true
