name: Check & Install Missing Dependencies

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [main, master, develop]
    paths:
      - 'package.json'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        if: hashFiles('requirements.txt') != '' || hashFiles('setup.py') != '' || hashFiles('pyproject.toml') != ''
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Check for missing Node.js dependencies
        if: hashFiles('package.json') != ''
        run: |
          echo "Checking Node.js dependencies..."
          
          # Install existing dependencies
          npm ci --prefer-offline --no-audit
          
          # Check for missing peer dependencies
          npm ls --depth=0 2>&1 | grep "UNMET PEER DEPENDENCY" | tee missing_peers.txt || true
          
          # Check for outdated dependencies
          npm outdated --json > outdated.json || true
          
          # Scan code for imported modules not in package.json
          find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
            grep -v node_modules | \
            xargs grep -h "import.*from\\|require(" | \
            grep -oE "['"]@?[^'"/]+['"]" | \
            sed "s/['"]//g" | \
            grep -v "^\." | \
            grep -v "^/" | \
            sort -u > used_modules.txt
          
          # Check which modules are not in package.json
          node -e "
            const pkg = require('./package.json');
            const fs = require('fs');
            const usedModules = fs.readFileSync('used_modules.txt', 'utf8').split('\\n').filter(Boolean);
            const allDeps = {...(pkg.dependencies || {}), ...(pkg.devDependencies || {})};
            const missing = usedModules.filter(mod => {
              const baseMod = mod.split('/')[0];
              return !allDeps[baseMod] && !['react', 'vue', 'angular', 'node:'].some(builtin => baseMod.startsWith(builtin));
            });
            if (missing.length > 0) {
              console.log('Missing dependencies detected:');
              missing.forEach(dep => console.log(' - ' + dep));
              fs.writeFileSync('missing_deps.txt', missing.join('\\n'));
            }
          " || true

      - name: Install missing Node.js dependencies
        if: hashFiles('package.json') != '' && hashFiles('missing_deps.txt') != ''
        run: |
          if [ -f "missing_deps.txt" ]; then
            echo "Installing missing dependencies..."
            while IFS= read -r dep; do
              if [ ! -z "$dep" ]; then
                echo "Installing $dep..."
                npm install "$dep" --save || npm install "$dep" --save-dev || true
              fi
            done < missing_deps.txt
          fi

      - name: Check for missing Python dependencies
        if: hashFiles('requirements.txt') != '' || hashFiles('setup.py') != '' || hashFiles('pyproject.toml') != ''
        run: |
          echo "Checking Python dependencies..."
          
          # Install pip-tools for dependency resolution
          pip install pip-tools pipreqs
          
          # Generate requirements from code if not exist
          if [ ! -f "requirements.txt" ]; then
            pipreqs . --force || true
          fi
          
          # Check for missing dependencies
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt --dry-run 2>&1 | grep "ERROR" || true
          fi

      - name: Update workflow files
        run: |
          echo "Updating workflow files..."
          
          # Update deprecated GitHub Actions
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Updating $file..."
            
            # Common updates
            sed -i 's/actions\/checkout@v3/actions\/checkout@v4/g' "$file"
            sed -i 's/actions\/setup-node@v3/actions\/setup-node@v4/g' "$file"
            sed -i 's/actions\/setup-python@v3/actions\/setup-python@v4/g' "$file"
            sed -i 's/actions\/cache@v2/actions\/cache@v3/g' "$file"
            
            # Update Node.js versions
            sed -i 's/node-version: 16/node-version: 18/g' "$file"
            sed -i 's/node-version: "16"/node-version: "18"/g' "$file"
            
            # Add missing permissions if needed
            if ! grep -q "permissions:" "$file"; then
              if grep -q "contents: write\|pull-requests: write" "$file"; then
                sed -i '/^on:/i permissions:\n  contents: read' "$file"
              fi
            fi
          done

      - name: Clean up unnecessary files
        run: |
          echo "Cleaning up files..."
          
          # Remove common temporary files
          find . -name "*.tmp" -delete || true
          find . -name "*.log" -not -path "./node_modules/*" -not -path "./.git/*" -delete || true
          find . -name ".DS_Store" -delete || true
          find . -name "Thumbs.db" -delete || true
          find . -name "*.swp" -delete || true
          find . -name "*.swo" -delete || true
          
          # Remove empty directories
          find . -type d -empty -not -path "./.git/*" -delete || true
          
          # Clean up node_modules if it exists
          if [ -d "node_modules" ]; then
            rm -rf node_modules/.cache || true
          fi
          
          # Remove temporary files created during this process
          rm -f missing_peers.txt outdated.json used_modules.txt missing_deps.txt || true

      - name: Run security checks
        run: |
          if [ -f "package.json" ]; then
            echo "Running npm security audit..."
            npm audit --audit-level moderate || true
          fi
          
          if [ -f "requirements.txt" ]; then
            echo "Running Python security check..."
            pip install safety || true
            safety check || true
          fi

      - name: Create Pull Request for updates
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Dependency Bot"
          
          git add -A
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Create a new branch
          BRANCH_NAME="dependency-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          git commit -m "chore: update dependencies and fix workflow issues

          - Install missing dependencies
          - Update GitHub Actions to latest versions
          - Clean up temporary files
          - Fix workflow configurations
          - Run security audits"
          
          git push origin "$BRANCH_NAME"
          
          # Create PR
          gh pr create \
            --title "ðŸ”§ Automated dependency updates and cleanup" \
            --body "This PR includes:

          âœ… Missing dependency installation
          âœ… GitHub Actions updates
          âœ… Workflow fixes and improvements  
          âœ… File cleanup
          âœ… Security audit checks
          
          This PR was automatically created by the dependency check workflow." \
            --label "dependencies,automated,maintenance" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
