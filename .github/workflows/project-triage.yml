name: Project Triage
on:
  issues:
    types: [opened, labeled, reopened]
  pull_request:
    types: [opened, ready_for_review, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            try {
              const { data: projects } = await github.request('GET /repos/{owner}/{repo}/projects', {
                owner, repo, headers: { 'Accept': 'application/vnd.github.inertia-preview+json' }
              });
              let project = projects.find(p => p.name === 'Quantum Auto');
              if (!project) {
                const created = await github.request('POST /repos/{owner}/{repo}/projects', {
                  owner, repo, name: 'Quantum Auto', body: 'Automanaged board',
                  headers: { 'Accept': 'application/vnd.github.inertia-preview+json' }
                });
                project = created.data;
              }
              const cols = await github.request('GET /projects/{project_id}/columns', {
                project_id: project.id, headers: { 'Accept': 'application/vnd.github.inertia-preview+json' }
              });
              const want = ['Backlog','To do','In progress','Done'];
              const byName = Object.fromEntries(cols.data.map(c => [c.name, c]));
              for (const n of want) {
                if (!byName[n]) {
                  const { data } = await github.request('POST /projects/{project_id}/columns', {
                    project_id: project.id, name: n,
                    headers: { 'Accept': 'application/vnd.github.inertia-preview+json' }
                  });
                  byName[n] = data;
                }
              }
              const isPR = !!context.payload.pull_request;
              const number = isPR ? context.payload.pull_request.number : context.payload.issue.number;
              let target = byName['Backlog'];
              if (isPR) {
                const pr = (await github.pulls.get({ owner, repo, pull_number: number })).data;
                target = pr.draft ? byName['To do'] : byName['In progress'];
              }
              const link = isPR ? { content_id: context.payload.pull_request.id, content_type: 'PullRequest' }
                                : { content_id: context.payload.issue.id, content_type: 'Issue' };
              try {
                await github.request('POST /projects/columns/{column_id}/cards', {
                  column_id: target.id, ...link,
                  headers: { 'Accept': 'application/vnd.github.inertia-preview+json' }
                });
              } catch (e) {
                if (e.status === 422) {
                  core.info('Card already exists');
                } else {
                  throw e;
                }
              }
            } catch (e) {
              core.warning(`Project triage skipped: ${e.message || e}`);
            }

