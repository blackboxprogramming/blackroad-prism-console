name: PR Preview Containers

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write

jobs:
  metadata:
    name: Prepare metadata
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      image: ${{ steps.metadata.outputs.image }}
      tag-suffix: ${{ steps.metadata.outputs.tag_suffix }}
      image-ref: ${{ steps.metadata.outputs.image_ref }}
      short-sha: ${{ steps.metadata.outputs.short_sha }}
    steps:
      - name: Compute image metadata
        id: metadata
        env:
          REPO: ${{ github.event.repository.name }}
          OWNER: ${{ github.repository_owner }}
          PR_NUMBER: ${{ github.event.number }}
          PR_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          SHORT_SHA="${PR_SHA:0:7}"
          IMAGE="ghcr.io/${OWNER}/${REPO}"
          TAG_SUFFIX="pr-${PR_NUMBER}-${SHORT_SHA}"

          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "tag_suffix=${TAG_SUFFIX}" >> "$GITHUB_OUTPUT"
          echo "image_ref=${IMAGE}:${TAG_SUFFIX}" >> "$GITHUB_OUTPUT"

  build-image:
    name: Build & Push Preview Image
    needs: metadata
    if: needs.metadata.result == 'success'
    uses: ./.github/workflows/reusable-docker-preview-build.yml
    with:
      image: ${{ needs.metadata.outputs.image }}
      tag: ${{ needs.metadata.outputs['tag-suffix'] }}
    secrets: inherit

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [metadata, build-image]
    if: needs.build-image.result == 'success'
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate SBOM with Syft
        uses: anchore/syft-action@v1
        with:
          image: ${{ needs.metadata.outputs['image-ref'] }}@${{ needs.build-image.outputs.digest }}
          output-file: sbom-pr-${{ github.event.number }}.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.number }}-sbom
          path: sbom-pr-${{ github.event.number }}.spdx.json
          if-no-files-found: error

  grype-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [metadata, build-image]
    if: needs.build-image.result == 'success'
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan image with Grype
        id: grype
        uses: anchore/grype-action@v1
        with:
          image: ${{ needs.metadata.outputs['image-ref'] }}@${{ needs.build-image.outputs.digest }}
          fail-build: false
          output: sarif

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

  comment:
    name: Post Preview Instructions
    runs-on: ubuntu-latest
    needs:
      - metadata
      - build-image
      - sbom
      - grype-scan
    if: needs.build-image.result == 'success'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- codex-preview-containers -->';
            const tag = `${{ needs.metadata.outputs['image-ref'] }}`;
            const digest = `${{ needs.build-image.outputs.digest }}`;
            const pr = context.issue.number;

            const lines = [
              marker,
              '### Preview Container',
              `• Image: \`${tag}\``,
              `• Digest: \`${digest}\``,
              '',
              '```bash',
              `docker pull ${tag}`,
              `docker run --rm ${tag}`,
              '```',
              '',
              `SBOM is available as the \`pr-${pr}-sbom\` workflow artifact.`
            ];
            const body = lines.join('\n');

            const { owner, repo } = context.repo;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: pr, per_page: 100 });
            const existing = comments.data.find(comment => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
            }

