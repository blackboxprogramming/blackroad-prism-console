name: Calm ChatOps v3 (flag-aware)
on: { issue_comment: { types: [created] } }
permissions: { contents: write, pull-requests: write, issues: write, actions: read }
jobs:
  flags:
    uses: ./.github/workflows/flags.yml
  chatops:
    needs: flags
    if: startsWith(github.event.comment.body, '/')
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      BOT_USER: ${{ secrets.BOT_USER || 'blackroad-bot' }}
      OLLAMA_URL: ${{ secrets.OLLAMA_URL }}
      OLLAMA_MODEL: ${{ vars.OLLAMA_MODEL || 'llama3.1:8b' }}
      AI_ENABLED: ${{ needs.flags.outputs.ai_tools }}
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false, fetch-depth: 0 }
      - run: |
          git config user.name  "$BOT_USER"
          git config user.email "$BOT_USER@users.noreply.github.com"
      - id: parse
        run: echo "cmd=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT

      # Quick help
      - if: contains(steps.parse.outputs.cmd, '/help')
        uses: actions/github-script@v7
        with:
          script: |
            const cmds = [
              "**heal** `/fix` `/format` `/lint`",
              "**deps** `/bump deps`",
              "**sync** `/sync <branch>` `/rerun <workflow>`",
              "**release** `/release` `/rollback <tag>`",
              "**docker** `/docker build` `/docker push <image:tag>`",
              "**sec** `/semgrep` `/trivy` `/gitleaks` `/snyk`",
              "**ai** `/summarize` `/review` `/describe` (respects flags)",
              "**toggle** `/toggle ai on|off` `/toggle security on|off`",
              "**web** `/deploy blackroad`"
            ].join("\n");
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body: "### ChatOps v3\n"+cmds});

      # Toggles (edit the flags file on a branch and push)
      - name: Toggle flags
        if: startsWith(steps.parse.outputs.cmd, '/toggle ')
        env:
          RAW: ${{ steps.parse.outputs.cmd }}
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
        run: |
          set -e
          FLAG=$(echo "$RAW" | awk '{print tolower($2)}')
          VAL=$(echo "$RAW"  | awk '{print tolower($3)}')
          [ "$VAL" = "on" ] && VAL=true || VAL=false
          git checkout -B chore/toggle-flags
          if [ ! -f .github/feature-flags.yml ]; then echo "ai_tools: true"$'\n'"security_scans: true"$'\n'"heavy_linters: true" > .github/feature-flags.yml; fi
          awk -v f="$FLAG" -v v="$VAL" '
            BEGIN{IGNORECASE=1}
            { if ($1==f":"){print f": "v; seen=1} else print $0 }
            END{ if(!seen) print f": "v }
          ' .github/feature-flags.yml > .github/feature-flags.tmp && mv .github/feature-flags.tmp .github/feature-flags.yml
          git add .github/feature-flags.yml
          git commit -m "chore(toggle): ${FLAG} -> ${VAL}" || true
          if [ -n "$BOT_TOKEN" ]; then
            git push "https://${BOT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:chore/toggle-flags
          fi

      # Heal/format/lint/deps/sync/release/docker same as before (omitted for brevity)â€¦

      # AI ops (guarded by flag)
      - name: Prepare diff
        id: diff
        if: (env.AI_ENABLED == 'true') && (contains(steps.parse.outputs.cmd, '/summarize') || contains(steps.parse.outputs.cmd, '/review') || contains(steps.parse.outputs.cmd, '/describe'))
        run: |
          git fetch origin || true
          base=$(git rev-parse HEAD~1 2>/dev/null || echo HEAD)
          git diff --unified=0 "$base"...HEAD | head -c 90000 > /tmp/diff.txt
      - name: Call Ollama
        if: steps.diff.outcome == 'success'
        run: |
          .github/tools/ollama_call.sh "Summarize or review:\n$(cat /tmp/diff.txt)" | tee /tmp/ollama.txt || true
      - name: Comment AI output
        if: steps.diff.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = 'AI disabled or unavailable.';
            try { body = fs.readFileSync('/tmp/ollama.txt','utf8').trim() || body; } catch {}
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body});

      # Website deploy trigger
      - name: Dispatch blackroad deploy
        if: contains(steps.parse.outputs.cmd, '/deploy blackroad')
        uses: actions/github-script@v7
        with:
          script: |
            try{
              await github.actions.createWorkflowDispatch({owner: context.repo.owner, repo: context.repo.repo, workflow_id:'deploy-blackroad.yml', ref: context.ref.replace('refs/heads/','')});
              await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body:"ðŸš€ Deploy requested for sites/blackroad"});
            }catch(e){
              await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body:"No deploy workflow found (deploy-blackroad.yml)."});
            }

      # LLM evaluation / safety report
      - name: Run LLM eval
        if: contains(steps.parse.outputs.cmd, '/eval') || contains(steps.parse.outputs.cmd, '/safety report')
        run: |
          node .github/tools/llm/prompt-eval.js || true
          node .github/tools/llm/hallucination-check.js || true
      - name: Comment LLM report
        if: contains(steps.parse.outputs.cmd, '/eval') || contains(steps.parse.outputs.cmd, '/safety report')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = 'No eval results found.';
            try { body = fs.readFileSync('artifacts/llm-eval/SUMMARY.md','utf8'); } catch {}
            await github.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.issue.number, body});
