name: CI & Deploy to Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write   # push to GHCR
  id-token: write

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DO_HOST: ${{ vars.DO_HOST }}
  DO_USER: ${{ vars.DO_USER }}
  DOMAIN:  ${{ vars.DOMAIN }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://blackroad.io
      reviewers: ['blackboxprogramming']

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Verify encrypted secrets
        run: |
          test -f .env.enc
          grep -q 'sops' .env.enc

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps & run quality gates
        shell: bash
        run: |
          set -euo pipefail
          # detect PM and install
          if [ -f pnpm-lock.yaml ]; then
            corepack enable && corepack prepare pnpm@latest --activate
            pm="pnpm"; install="pnpm install --frozen-lockfile"
          elif [ -f yarn.lock ]; then
            corepack enable || true
            pm="yarn"; install="yarn install --frozen-lockfile"
          elif [ -f package-lock.json ]; then
            pm="npm"; install="npm ci --no-audit --no-fund"
          else
            pm="npm"; install="npm install --no-audit --no-fund"
          fi
          eval "$install"

          # quality gates (only if scripts exist)
          jq -e '.scripts.format' package.json >/dev/null 2>&1 && ($pm run format)
          jq -e '.scripts.lint' package.json   >/dev/null 2>&1 && ($pm run lint)
          jq -e '.scripts.typecheck' package.json >/dev/null 2>&1 && ($pm run typecheck)
          jq -e '.scripts.test' package.json   >/dev/null 2>&1 && ($pm run test -- --ci)
          jq -e '.scripts.build' package.json  >/dev/null 2>&1 && ($pm run build)

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest

      - name: Rsync staged release
        run: |
          RELEASE="/srv/releases/api-$(date +%Y%m%d%H%M%S)"
          ssh root@${{ vars.DROPLET_HOST || '159.65.43.12' }} "mkdir -p ${RELEASE}"
          rsync -az --delete ./apps/api/dist/ root@${{ vars.DROPLET_HOST || '159.65.43.12' }}:${RELEASE}/
          ssh root@${{ vars.DROPLET_HOST || '159.65.43.12' }} "ln -sfn ${RELEASE} /srv/blackroad-api && systemctl restart blackroad-api || pm2 restart blackroad-api || true"
