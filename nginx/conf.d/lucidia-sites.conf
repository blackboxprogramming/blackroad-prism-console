# Upstreams (Docker service names on port 8000)
upstream blackroad_app {
  least_conn;
  server lucidia-blackroad:8000 max_fails=3 fail_timeout=30s;
  keepalive 32;
}
upstream blackroadinc_app {
  least_conn;
  server lucidia-blackroadinc:8000 max_fails=3 fail_timeout=30s;
  keepalive 32;
}

# HTTP -> HTTPS redirect (both hosts)
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name blackroad.io blackroadinc.us;
  return 301 https://$host$request_uri;
}

# blackroad.io
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name blackroad.io;

  # TLS â€“ mount your certs into ./nginx/ssl/
  ssl_certificate     /etc/ssl/private/blackroad.io.fullchain.pem;
  ssl_certificate_key /etc/ssl/private/blackroad.io.privkey.pem;
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 1d;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header X-XSS-Protection "1; mode=block" always;
  include snippets/job_applier.conf;

    location /api/ {
      limit_req zone=api burst=20 nodelay;
      proxy_pass http://blackroad_app;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 60s;
    }

    location /api/chat {
      proxy_pass http://127.0.0.1:3000;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_cache off;
    }

  location / {
    limit_req zone=general burst=10 nodelay;
    proxy_pass http://blackroad_app;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 60s;
  }

  location = /nginx-health {
    access_log off;
    return 200 "ok";
  }
}

# blackroadinc.us
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name blackroadinc.us;

  ssl_certificate     /etc/ssl/private/blackroadinc.us.fullchain.pem;
  ssl_certificate_key /etc/ssl/private/blackroadinc.us.privkey.pem;
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 1d;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header X-XSS-Protection "1; mode=block" always;
  include snippets/job_applier.conf;

    location /api/ {
      limit_req zone=api burst=20 nodelay;
      proxy_pass http://blackroadinc_app;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 60s;
    }

    location /api/chat {
      proxy_pass http://127.0.0.1:3000;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_cache off;
    }

  location / {
    limit_req zone=general burst=10 nodelay;
    proxy_pass http://blackroadinc_app;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 60s;
  }

  location = /nginx-health {
    access_log off;
    return 200 "ok";
  }
}
