"""Plot helper for the toy MPM energy logs."""

from __future__ import annotations

import argparse
import csv
import importlib.util
from pathlib import Path

if importlib.util.find_spec("matplotlib") is None:
    raise SystemExit("matplotlib is required for plotting. Install it with `pip install matplotlib`.")

import matplotlib

matplotlib.use("Agg", force=True)
import matplotlib.pyplot as plt


def load_energy_log(path: Path) -> list[dict[str, float]]:
    entries: list[dict[str, float]] = []
    with path.open("r", encoding="utf-8") as handle:
        reader = csv.DictReader(handle)
        for row in reader:
            entries.append({key: float(row[key]) for key in row})
    return entries


def build_figure(entries: list[dict[str, float]]) -> plt.Figure:
    steps = [row["step"] for row in entries]
    dt_values = [row["dt"] for row in entries]
    total_energy = [row["total"] for row in entries]
    move_proxy = [row["move_proxy"] for row in entries]

    fig, axes = plt.subplots(3, 1, figsize=(10, 10), sharex=True)

    axes[0].plot(steps, dt_values, color="#0366d6", linewidth=1.5)
    axes[0].set_ylabel("dt")
    axes[0].set_title("Adaptive time step evolution")
    axes[0].grid(True, linestyle="--", alpha=0.3)

    axes[1].plot(steps, total_energy, color="#6f42c1", linewidth=1.5)
    axes[1].set_ylabel("Energy")
    axes[1].set_title("Total energy")
    axes[1].grid(True, linestyle="--", alpha=0.3)

    axes[2].plot(steps, move_proxy, color="#22863a", linewidth=1.5)
    axes[2].set_ylabel("Move proxy")
    axes[2].set_xlabel("Step")
    axes[2].set_title("Step displacement proxy")
    axes[2].grid(True, linestyle="--", alpha=0.3)

    fig.tight_layout()
    return fig


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Plot energy and dt diagnostics")
    parser.add_argument(
        "--log-path",
        type=Path,
        default=Path("outputs/logs/energy.csv"),
        help="CSV log generated by the solver",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("outputs/plots/energy_overview.png"),
        help="Destination for the saved plot",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    entries = load_energy_log(args.log_path)
    if not entries:
        raise SystemExit("Energy log is empty â€“ run `make mpm-core` first")

    args.output.parent.mkdir(parents=True, exist_ok=True)
    figure = build_figure(entries)
    figure.savefig(args.output, dpi=150)
    print(f"Saved energy diagnostics to {args.output}")


if __name__ == "__main__":
    main()
