generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AlertKind {
  TRADE
  CRYPTO
  COMMS
  INSIDER
  SYSTEM
}

enum AlertStatus {
  Open
  Suppressed
  InCase
  Closed
}

enum CaseStatus {
  Open
  UnderReview
  Escalated
  SAR_Drafted
  Closed_NoIssue
  Closed_Remediation
  Closed_SARFiled
}

enum CaseItemType {
  Alert
  Trade
  WalletTx
  Comm
  Document
  Note
  Task
}

enum LexiconStatus {
  Active
  Disabled
}

enum CommChannel {
  EMAIL
  IM
  SMS
  FILE
  NOTE
}

enum InsiderEvent {
  EARNINGS
  MNA
  SECONDARY
  TOKEN_LISTING
  OTHER
}

enum SARDraftStatus {
  Draft
  ReadyForFiling
}

model FeeSchedule {
  id        String   @id @default(cuid())
  name      String
  status    String
  spec      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BillingGroup {
  id           String   @id @default(cuid())
  label        String
  householdIds String[]
  policyKey    String?
}

model AccountFeePlan {
  id                     String   @id @default(cuid())
  accountId              String
  feeScheduleId          String
  billingGroupId         String?
  startDate              DateTime
  endDate                DateTime?
  billFrequency          String
  billMode               String
  billCurrency           String
  custodyDeductionAllowed Boolean
  performanceFeeAllowed  Boolean
  createdAt              DateTime @default(now())
}

model FeeAccrual {
  id         String   @id @default(cuid())
  accountId  String
  asOf       DateTime
  baseAUM    Decimal  @db.Decimal(38, 6)
  rateBps    Int
  amount     Decimal  @db.Decimal(38, 6)
  components Json
  source     String
}

model Invoice {
  id                String   @id @default(cuid())
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  billingGroupId    String?
  accountId         String?
  status            String
  currency          String
  amount            Decimal  @db.Decimal(38, 6)
  lines             Json
  createdAt         DateTime @default(now())
  issuedAt          DateTime?
  paidAt            DateTime?
  evidencePath      String?
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  method      String
  amount      Decimal  @db.Decimal(38, 6)
  currency    String
  externalRef String?
  postedAt    DateTime
  status      String
  meta        Json
}

model FeeException {
  id        String   @id @default(cuid())
  accountId String?
  invoiceId String?
  code      String
  severity  Int
  details   Json
  status    String
  createdAt DateTime @default(now())
  resolvedAt DateTime?
}

model ErrorLedger {
  id          String   @id @default(cuid())
  scope       String
  refId       String?
  description String
  correction  Json?
  createdAt   DateTime @default(now())
}

model Alert {
  id        String      @id @default(cuid())
  kind      AlertKind
  scenario  String
  severity  Int
  status    AlertStatus @default(Open)
  key       String
  signal    Json
  createdAt DateTime    @default(now())

  @@index([kind])
  @@index([status])
  @@index([scenario, key])
}

model Case {
  id        String     @id @default(cuid())
  title     String
  status    CaseStatus @default(Open)
  ownerId   String?
  summary   String?
  createdAt DateTime   @default(now())
  closedAt  DateTime?
  alerts    CaseItem[]
}

model CaseItem {
  id     String       @id @default(cuid())
  caseId String
  type   CaseItemType
  refId  String
  meta   Json
  case   Case         @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([type])
}

model Lexicon {
  id        String        @id @default(cuid())
  key       String        @unique
  phrases   String[]
  proximity Int
  riskBase  Int
  status    LexiconStatus @default(Active)
}

model Comm {
  id           String      @id @default(cuid())
  channel      CommChannel
  threadId     String?
  from         String
  to           String[]
  subject      String?
  ts           DateTime
  text         String
  sha256       String
  retentionKey String
  archived     Boolean     @default(false)

  @@index([channel])
  @@index([ts])
  @@unique([channel, sha256])
}

model Document {
  id        String   @id @default(cuid())
  commId    String?
  name      String
  sha256    String   @unique
  path      String
  createdAt DateTime @default(now())
}

model InsiderIssuer {
  id             String       @id @default(cuid())
  symbol         String?
  name           String
  event          InsiderEvent
  windowStart    DateTime
  windowEnd      DateTime
  restrictedList Boolean      @default(false)
  persons        InsiderPerson[]

  @@index([symbol])
  @@index([restrictedList])
}

model InsiderPerson {
  id            String   @id @default(cuid())
  personId      String
  issuerId      String
  wallCrossedAt DateTime
  notes         String?
  issuer        InsiderIssuer @relation(fields: [issuerId], references: [id], onDelete: Cascade)

  @@index([issuerId])
  @@index([personId])
}

model SuppressionRule {
  id         String   @id @default(cuid())
  scenario   String
  keyPattern String
  expiresAt  DateTime?
  reason     String
  createdBy  String
  createdAt  DateTime @default(now())

  @@index([scenario])
}

model SARDraft {
  id          String        @id @default(cuid())
  caseId      String
  summary     String
  subjects    Json
  narrative   String
  attachments String[]
  status      SARDraftStatus @default(Draft)
  createdAt   DateTime       @default(now())
}

model WormBlock {
  id      String   @id @default(cuid())
  idx     Int      @unique
  ts      DateTime @default(now())
  payload Json
  prevHash String
  hash    String
}

