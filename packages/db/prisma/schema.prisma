generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique
}

model Role {
  id    String @id @default(cuid())
  key   String @unique
  title String
}

model Permission {
  id   String @id @default(cuid())
  key  String @unique
  desc String
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
}

model Entitlement {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  grantedBy  String
  grantedAt  DateTime @default(now())
  expiresAt  DateTime?
  status     String
  recertDue  DateTime?
}

model SoDRule {
  id          String @id @default(cuid())
  key         String @unique
  description String
  constraint  String
  leftRole    String
  rightRole   String?
  scope       String?
  severity    Int
}

model SoDConflict {
  id         String   @id @default(cuid())
  userId     String
  ruleKey    String
  status     String
  createdAt  DateTime @default(now())
  resolvedAt DateTime?
  notes      String?
}

model RFC {
  id             String   @id @default(cuid())
  title          String
  type           String
  description    String
  riskScore      Int
  status         String
  requesterId    String
  approverIds    String[]
  submittedAt    DateTime?
  decidedAt      DateTime?
  implementedAt  DateTime?
  rollbackPlan   String?
  postImplReview Json?
  links          Json
  notes          String?
}

model Vendor {
  id          String @id @default(cuid())
  name        String
  category    String
  criticality String
  status      String
  riskScore   Int
  nextReview  DateTime?
}

model VendorDoc {
  id         String   @id @default(cuid())
  vendorId   String
  kind       String
  path       String
  sha256     String
  expiresAt  DateTime?
  receivedAt DateTime @default(now())
}

model DDQ {
  id               String   @id @default(cuid())
  vendorId         String
  questionnaireKey String
  answers          Json
  score            Int
  status           String
  completedAt      DateTime?
}

model Incident {
  id                String   @id @default(cuid())
  title             String
  type              String
  severity          String
  status            String
  detectedAt        DateTime
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  description       String
  rootCause         String?
  correctiveActions String?
  communications    Json
  relatedIds        Json
}

model BCPPlan {
  id          String   @id @default(cuid())
  version     Int
  effectiveAt DateTime
  rtoMinutes  Int
  rpoMinutes  Int
  contacts    Json
  scenarios   Json
  tests       Json
  status      String
}

model BcpTestRecord {
  id           String   @id @default(cuid())
  planId       String
  runAt        DateTime @default(now())
  scenario     String
  participants String[]
  issues       String[]
  outcome      String
}

model KRI {
  id    String   @id @default(cuid())
  key   String   @unique
  label String
  value Decimal  @db.Decimal(20, 6)
  asOf  DateTime
  meta  Json
}

model Gate {
  id        String   @id @default(cuid())
  action    String
  context   Json
  allowed   Boolean
  reason    String?
  createdAt DateTime @default(now())
}

model WormBlock {
  id      String   @id @default(cuid())
  idx     Int      @unique
  ts      DateTime @default(now())
  payload Json
  prevHash String
  hash    String
}
