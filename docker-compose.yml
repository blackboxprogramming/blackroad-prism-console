version: '3.8'

x-node-common: &node-common
  restart: unless-stopped
  expose: ['8000']
  networks: ['lucidia-backend']
  depends_on:
    redis:
      condition: service_healthy
    mongo:
      condition: service_healthy
    postgres:
      condition: service_healthy
  healthcheck:
    test: ['CMD-SHELL', 'node scripts/healthcheck.js || exit 1']
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
  security_opt: ['no-new-privileges:true']
  cap_drop: ['ALL']
  read_only: true
  tmpfs:
    - /tmp
  ulimits:
    nofile:
      soft: 65536
      hard: 65536
    nproc: 4096
  logging:
    driver: json-file
    options:
      max-size: '10m'
      max-file: '5'
  env_file:
    - ./.env
  # NOTE: deploy.* only enforced in Docker Swarm
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

services:
  # Main Lucidia Application (blackroad.io)
  lucidia-blackroad:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lucidia-blackroad
    <<: *node-common
    environment:
      NODE_ENV: production
      PORT: '8000'
      LUCIDIA_INSTANCE: blackroad
      LUCIDIA_LOG_LEVEL: info
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/lucidia_blackroad?authSource=admin&retryWrites=true&w=majority
      POSTGRES_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/lucidia_blackroad
    volumes:
      - lucidia-blackroad-data:/app/data
      - lucidia-blackroad-logs:/app/logs
      - ./config/production.json:/app/config/production.json:ro

  # Secondary Lucidia Application (blackroadinc.us)
  lucidia-blackroadinc:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lucidia-blackroadinc
    <<: *node-common
    environment:
      NODE_ENV: production
      PORT: '8000'
      LUCIDIA_INSTANCE: blackroadinc
      LUCIDIA_LOG_LEVEL: info
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/lucidia_blackroadinc?authSource=admin&retryWrites=true&w=majority
      POSTGRES_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/lucidia_blackroadinc
    volumes:
      - lucidia-blackroadinc-data:/app/data
      - lucidia-blackroadinc-logs:/app/logs
      - ./config/production.json:/app/config/production.json:ro

  # NGINX Reverse Proxy (edge)
  nginx:
    image: nginx:alpine
    container_name: lucidia-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      lucidia-blackroad:
        condition: service_healthy
      lucidia-blackroadinc:
        condition: service_healthy
    networks:
      - lucidia-backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/ssl/private:ro
      - nginx-cache:/var/cache/nginx
    healthcheck:
      test: ['CMD-SHELL', 'nginx -t || exit 1']
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt: ['no-new-privileges:true']
    cap_drop: ['ALL']
    read_only: true
    tmpfs:
      - /var/run
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'

  # Redis
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      sh -c "redis-server --appendonly yes
             --requirepass $$REDIS_PASSWORD
             --maxmemory 256mb --maxmemory-policy allkeys-lru"
    env_file: [./.env]
    volumes:
      - redis-data:/data
    networks: ['lucidia-backend']
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a "$REDIS_PASSWORD" PING | grep -q PONG']
      interval: 30s
      timeout: 5s
      retries: 5

  # MongoDB
  mongo:
    image: mongo:7
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
      # - ./db/mongo-init:/docker-entrypoint-initdb.d:ro   # optional seeds
    networks: ['lucidia-backend']
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mongosh --username "$MONGO_USER" --password "$MONGO_PASSWORD" --eval "db.adminCommand(''ping'')" | grep -q ok',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/postgres-init:/docker-entrypoint-initdb.d:ro
    networks: ['lucidia-backend']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U "$POSTGRES_USER" -d postgres']
      interval: 30s
      timeout: 5s
      retries: 5

networks:
  lucidia-backend:
    driver: bridge

volumes:
  lucidia-blackroad-data:
  lucidia-blackroad-logs:
  lucidia-blackroadinc-data:
  lucidia-blackroadinc-logs:
  redis-data:
  mongo-data:
  postgres-data:
  nginx-cache:
