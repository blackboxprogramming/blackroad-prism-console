#!/usr/bin/env python3
"""Simple agent to ensure baseline files exist in cloned repositories.

The agent reads ``runtime/manifests/codex_repos_manifest.json`` and for each
repository listed ensures a small set of baseline files are present. If files are
missing they are created with minimal placeholder content. Existing files are
left untouched.  The goal is to provide a minimal example of an automated agent
that can make small improvements across many repositories.
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, List

# Baseline files and their placeholder content.  ``{name}`` will be replaced with
# the repository name where applicable.
BASELINE_CONTENT: Dict[str, str] = {
    "README.md": "# {name}\n\nPlaceholder README generated by codex_repo_improver.\n",
    "LICENSE": "TODO: choose a license.\n",
    "SECURITY.md": "Please report security issues responsibly.\n",
    ".gitignore": "# Created by codex_repo_improver\n",
}


def ensure_file(path: Path, content: str) -> bool:
    """Create ``path`` with ``content`` if it does not already exist.

    Any missing parent directories are created automatically.  Returns
    ``True`` if a file was created.
    """

    if path.exists():
        return False

    # Ensure the parent directory exists so that nested files can be created
    # without raising ``FileNotFoundError``.
    path.parent.mkdir(parents=True, exist_ok=True)

    path.write_text(content, encoding="utf-8")
    return True


def improve_repo(repo: Dict[str, str]) -> List[str]:
    """Apply baseline improvements to a repository.

    Parameters
    ----------
    repo:
        Repository entry from the manifest.

    Returns
    -------
    list of str
        Paths of any files or directories that were created.
    """

    repo_path = Path(repo["path"])
    if repo.get("read_only") or not repo_path.exists():
        return []

    created: List[str] = []
    for name, template in BASELINE_CONTENT.items():
        file_path = repo_path / name
        if ensure_file(file_path, template.format(name=repo["name"])):
            created.append(str(file_path))

    workflows_dir = repo_path / ".github" / "workflows"
    if not workflows_dir.exists():
        workflows_dir.mkdir(parents=True, exist_ok=True)
        created.append(str(workflows_dir))

    return created


def main() -> None:
    manifest_path = Path("runtime/manifests/codex_repos_manifest.json")
    if not manifest_path.exists():
        print(f"Manifest not found: {manifest_path}")
        return

    try:
        manifest = json.loads(manifest_path.read_text())
    except json.JSONDecodeError as exc:
        print(f"Failed to parse manifest: {exc}")
        return

    total_changes: Dict[str, List[str]] = {}
    for repo in manifest.get("repos", []):
        changes = improve_repo(repo)
        if changes:
            total_changes[repo["name"]] = changes

    if not total_changes:
        print("No changes applied.")
        return

    print("Created baseline files:")
    for repo_name, files in total_changes.items():
        print(f"- {repo_name}:")
        for path in files:
            print(f"  - {path}")


if __name__ == "__main__":
    main()
