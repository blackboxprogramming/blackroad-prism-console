---
apiVersion: v1
kind: Namespace
metadata:
  name: prism-monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: prism-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']
    scrape_configs:
      - job_name: 'blackroad-api'
        static_configs:
          - targets: ['blackroad-api.lucidia.svc.cluster.local:3000']
      - job_name: 'lucidia-llm'
        static_configs:
          - targets: ['lucidia-llm.lucidia.svc.cluster.local:8000']
      - job_name: 'lucidia-math'
        static_configs:
          - targets: ['lucidia-math.lucidia.svc.cluster.local:9000']
      - job_name: 'nginx-ingress'
        static_configs:
          - targets: ['nginx-ingress-controller-metrics.prism-monitoring.svc.cluster.local:10254']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: prism-monitoring
data:
  alerts.yml: |
    groups:
      - name: prism-alerts
        rules:
          - alert: ServiceDown
            expr: up == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: '{{ $labels.job }} down'
              description: '{{ $labels.instance }} is not responding'
          - alert: High5xxRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 5
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: 'High 5xx rate'
              description: 'HTTP 5xx responses exceed threshold'
          - alert: DBWriteErrors
            expr: increase(db_write_errors_total[5m]) > 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: 'Database write errors'
              description: 'Database write errors detected'
          - alert: ContradictionSpike
            expr: increase(math_contradictions_total[10m]) > 10
            labels:
              severity: critical
            annotations:
              summary: 'Contradiction spike'
              description: 'More than 10 contradictions in 10m'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prism-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.52.0
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=15d'
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prism-monitoring
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: prism-monitoring
data:
  alertmanager.yml: |
    route:
      receiver: 'team'
    receivers:
      - name: 'team'
        slack_configs:
          - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
            channel: '#alerts'
        webhook_configs:
          - url: 'https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: prism-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.27.0
          args:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
          ports:
            - containerPort: 9093
          volumeMounts:
            - name: config
              mountPath: /etc/alertmanager
      volumes:
        - name: config
          configMap:
            name: alertmanager-config
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: prism-monitoring
spec:
  type: ClusterIP
  selector:
    app: alertmanager
  ports:
    - port: 9093
      targetPort: 9093
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: prism-monitoring
data:
  loki.yml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
    schema_config:
      configs:
        - from: 2024-01-01
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/index
        cache_location: /loki/cache
      filesystem:
        directory: /loki/chunks
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: true
      retention_period: 15d
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: prism-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki:2.9.0
          args:
            - '-config.file=/etc/loki/loki.yml'
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: config
              mountPath: /etc/loki
            - name: data
              mountPath: /loki
      volumes:
        - name: config
          configMap:
            name: loki-config
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: prism-monitoring
spec:
  type: ClusterIP
  selector:
    app: loki
  ports:
    - port: 3100
      targetPort: 3100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: prism-monitoring
data:
  promtail.yml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    clients:
      - url: http://loki:3100/loki/api/v1/push
    positions:
      filename: /tmp/positions.yaml
    scrape_configs:
      - job_name: system
        static_configs:
          - targets:
              - localhost
            labels:
              job: varlogs
              __path__: /var/log/pods/*/*/*.log
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: prism-monitoring
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: default
      containers:
        - name: promtail
          image: grafana/promtail:2.9.0
          args:
            - '-config.file=/etc/promtail/promtail.yml'
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - name: varlog
              mountPath: /var/log
            - name: pods
              mountPath: /var/log/pods
            - name: docker
              mountPath: /var/lib/docker/containers
          securityContext:
            runAsUser: 0
      volumes:
        - name: config
          configMap:
            name: promtail-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: pods
          hostPath:
            path: /var/log/pods
        - name: docker
          hostPath:
            path: /var/lib/docker/containers
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: prism-monitoring
type: Opaque
stringData:
  admin-user: admin
  admin-password: admin
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: prism-monitoring
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: prism-monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: prism-monitoring
data:
  providers.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: prism-monitoring
data:
  api-latency.json: |
    {"title":"API request latency & error rate","schemaVersion":27,"panels":[]}
  llm-response.json: |
    {"title":"LLM response times","schemaVersion":27,"panels":[]}
  math-contradictions.json: |
    {"title":"Math service contradictions","schemaVersion":27,"panels":[]}
  system-resources.json: |
    {"title":"System resource usage","schemaVersion":27,"panels":[]}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: prism-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.0
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: admin-password
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: providers
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
          ports:
            - containerPort: 3000
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: providers
          configMap:
            name: grafana-dashboard-providers
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: prism-monitoring
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      name: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: prism-monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: grafana-admin
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  rules:
    - http:
        paths:
          - path: /monitoring
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
---
