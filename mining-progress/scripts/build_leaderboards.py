#!/usr/bin/env python3
import csv
import json
from collections import defaultdict, deque
from datetime import datetime, timedelta

LOG = "logs/blocks.csv"
OUT_MD = "leaderboards/leaderboard.md"
OUT_JSON = "leaderboards/leaderboard.json"


def iso(s: str) -> datetime:
    return datetime.fromisoformat(s.replace("Z", "+00:00"))


rows = []
with open(LOG, newline="") as f:
    reader = csv.DictReader(f)
    for row in reader:
        row["ts"] = iso(row["timestamp"])
        row["height"] = int(float(row["block_height"]))
        row["energy"] = float(row["energy_kwh"])
        row["fees"] = float(row["fees_btc"])
        row["subsidy"] = float(row["subsidy_btc"])
        row["reward"] = row["fees"] + row["subsidy"]
        rows.append(row)

rows.sort(key=lambda x: x["ts"])
total = len(rows)

by_miner = defaultdict(lambda: {"blocks": 0, "energy": 0.0, "fees": 0.0, "reward": 0.0})
for record in rows:
    miner = record["miner"]
    stats = by_miner[miner]
    stats["blocks"] += 1
    stats["energy"] += record["energy"]
    stats["fees"] += record["fees"]
    stats["reward"] += record["reward"]

window = timedelta(hours=2)
queue = deque()
twohr_counts = defaultdict(int)
twohr_counts_by_miner = defaultdict(lambda: defaultdict(int))
for record in rows:
    queue.append(record)
    while queue and (record["ts"] - queue[0]["ts"]) > window:
        queue.popleft()
    twohr_counts[record["ts"]] = len(queue)
    for item in queue:
        twohr_counts_by_miner[record["ts"]][item["miner"]] += 1

cool = max(rows, key=lambda x: x["reward"]) if rows else None

snapshot = {
    "total_blocks": total,
    "miners": {
        miner: {
            "blocks": values["blocks"],
            "share_pct": round(100 * values["blocks"] / total, 2) if total else 0,
            "kwh_per_block": round(values["energy"] / values["blocks"], 3)
            if values["blocks"]
            else None,
            "blocks_per_kwh": round(values["blocks"] / values["energy"], 6)
            if values["energy"] > 0
            else None,
            "avg_reward_btc": round(values["reward"] / values["blocks"], 6)
            if values["blocks"]
            else None,
        }
        for miner, values in by_miner.items()
    },
    "coolest_block": {
        "timestamp": cool["timestamp"],
        "height": cool["height"],
        "miner": cool["miner"],
        "total_reward_btc": round(cool["reward"], 6),
        "fees_btc": cool["fees"],
        "subsidy_btc": cool["subsidy"],
        "energy_kwh": cool["energy"],
        "notes": cool["notes"],
    }
    if cool
    else None,
}
with open(OUT_JSON, "w") as f:
    json.dump(snapshot, f, indent=2)


def miner_row(miner: str, values: dict) -> str:
    kwh_per_block = f"{values['energy'] / values['blocks']:.2f}" if values["blocks"] else "—"
    blocks_per_kwh = f"{values['blocks'] / values['energy']:.6f}" if values["energy"] > 0 else "—"
    share = f"{(100 * values['blocks'] / total):.2f}%" if total else "—"
    return (
        f"| {miner} | {values['blocks']} | {share} | {kwh_per_block} | {blocks_per_kwh} | "
        f"{values['reward']:.3f} |"
    )


with open(OUT_MD, "w") as f:
    f.write("# Mining Leaderboard\n\n")
    f.write(f"**Total blocks:** {total}\n\n")
    f.write("## By Miner\n")
    f.write("| Miner | Blocks | Share | kWh/Block | Blocks/kWh | Total Reward (BTC) |\n")
    f.write("|---|---:|---:|---:|---:|---:|\n")
    for miner, values in sorted(by_miner.items(), key=lambda kv: (-kv[1]["blocks"], kv[0])):
        f.write(miner_row(miner, values) + "\n")
    if cool:
        f.write("\n## Coolest Block (highest total reward)\n")
        f.write(f"- Height: **{cool['height']}**\n")
        f.write(f"- Time: **{cool['timestamp']}**\n")
        f.write(
            f"- Miner: **{cool['miner']}**, Reward: **{cool['reward']:.6f} BTC** "
            f"(fees {cool['fees']} + subsidy {cool['subsidy']})\n"
        )
        f.write(f"- Energy: **{cool['energy']} kWh**\n")
        if cool["notes"]:
            f.write(f"- Notes: {cool['notes']}\n")
    f.write("\n---\n")
    f.write("_Generated by scripts/build_leaderboards.py_\n")
print("Leaderboards built.")
