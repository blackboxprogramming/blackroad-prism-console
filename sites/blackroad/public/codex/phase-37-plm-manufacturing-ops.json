{
  "type": "codex-prompt",
  "id": "phase-37",
  "slug": "phase-37-plm-manufacturing-ops",
  "title": "Phase 37 — PLM & MANUFACTURING OPS (BOMs, ECO/ECR, Routings, Work Instructions, SPC, Yield, COQ)",
  "summary": "Offline PLM & Manufacturing Ops layer for blackboxprogramming/blackroad-prism-console",
  "owner": "blackroad",
  "tags": [
    "codex",
    "plm",
    "manufacturing",
    "spc",
    "mrp",
    "eco",
    "coq"
  ],
  "model_hint": "Codex",
  "temperature": 0,
  "updated": "2025-09-13",
  "version": "1.0.0",
  "canonical_repo": "blackboxprogramming/blackroad-prism-console",
  "copy_filename": "codex_phase_37.txt",
  "html": "<p>Here’s Phase 37 — PLM &amp; MANUFACTURING OPS (BOMs, ECO/ECR, Routings, Work Instructions, SPC, Yield, COQ). Paste this into Codex.</p>\n<p>───</p>\n<p><strong>Codex Prompt — Phase 37 (offline PLM &amp; MFG: product lifecycle, BOM &amp; versions, engineering change control, routings/work centers, work instructions, SPC/yield tracking, cost-of-quality)</strong></p>\n<p>Continue in blackboxprogramming/blackroad-prism-console. Add an offline Product Lifecycle &amp; Manufacturing Ops layer: versioned BOMs, Engineering Change Orders (ECO/ECR), routings &amp; work centers, printable work instructions, Statistical Process Control (SPC) with yield/defect analytics, and Cost-of-Quality (COQ). Everything is deterministic, file-backed, and air-gapped.</p>\n<p><strong>Objectives (acceptance criteria)</strong></p>\n<ol>\n<li>Product &amp; BOM Management (Versioned)</li>\n</ol>\n<ul>\n<li>New: /plm/bom.py</li>\n<li>Entities: Item(id, rev, type: &quot;assembly|component|raw&quot;, uom, lead_time_days, cost, suppliers:list)</li>\n<li>BOM(item_id, rev, lines:[{component_id, qty, refdes?, scrap_pct?}])</li>\n<li>APIs: load_items(...), load_boms(...), explode(bom, level=N), where_used(component_id)</li>\n<li>Persist normalized catalogs to /artifacts/plm/items.json and /artifacts/plm/boms.json.</li>\n<li>CLI:<ul>\n<li>plm:items:load --dir fixtures/plm/items</li>\n<li>plm:bom:load --dir fixtures/plm/boms</li>\n<li>plm:bom:explode --item PROD-100 --rev A --level 3</li>\n</ul>\n</li>\n<li>Lake &amp; contracts: write items, boms, where_used facts; validate with schemas.</li>\n</ul>\n<ol start=\"2\">\n<li>Engineering Change Control (ECO/ECR)</li>\n</ol>\n<ul>\n<li>New: /plm/eco.py</li>\n<li>Change(id, type:&quot;ECR|ECO&quot;, item_id, from_rev, to_rev, reason, risk, status:&quot;draft|review|approved|released|rejected&quot;, effects:[items])</li>\n<li>Workflow: create → impact analysis (cost, supply, routing) → approvals (Legal/QA/Manufacturing) → release.</li>\n<li>Tie-ins: Approvals (Phase 5), e-Sign (Phase 18), Duty-of-Care (block if SPC shows instability).</li>\n<li>Artifacts: /artifacts/plm/changes/{id}.json + eco_{id}.md.</li>\n<li>CLI:<ul>\n<li>plm:eco:new --item PROD-100 --from A --to B --reason &quot;Connector change&quot;</li>\n<li>plm:eco:impact --id ECO-001</li>\n<li>plm:eco:approve --id ECO-001 --as-user U_QA</li>\n<li>plm:eco:release --id ECO-001</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Routings, Work Centers, and Standard Times</li>\n</ol>\n<ul>\n<li>New: /mfg/routing.py</li>\n<li>Entities: WorkCenter(id, name, capacity_per_shift, skills, cost_rate)</li>\n<li>Routing(item_rev, steps:[{wc, op, std_time_min, yield_pct, instructions_path?}])</li>\n<li>Validate capacity vs plan; compute theoretical throughput &amp; labor cost.</li>\n<li>CLI:<ul>\n<li>mfg:wc:load --file fixtures/mfg/work_centers.csv</li>\n<li>mfg:routing:load --dir fixtures/mfg/routings</li>\n<li>mfg:routing:capcheck --item PROD-100 --rev B --qty 1000</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Work Instructions (Printable, Version-locked)</li>\n</ol>\n<ul>\n<li>New: /mfg/work_instructions.py</li>\n<li>Markdown instructions with placeholders for revision, torque tables, images (local only).</li>\n<li>render(item_rev, routing)-&gt;/artifacts/mfg/wi/PROD-100_B.md (+ .html with inline CSS).</li>\n<li>CLI:<ul>\n<li>mfg:wi:render --item PROD-100 --rev B</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>SPC &amp; Yield Tracking</li>\n</ol>\n<ul>\n<li>New: /mfg/spc.py</li>\n<li>Ingest local inspection logs fixtures/mfg/spc/*.csv (measurements by op/station).</li>\n<li>Compute X-bar/R and p-charts deterministically; detect out-of-control &amp; trend with rule codes:<ul>\n<li>SPC_POINT_BEYOND_3SIG, SPC_TREND_7, SPC_RUN_8_ONE_SIDE.</li>\n</ul>\n</li>\n<li>Outputs: /artifacts/mfg/spc/{charts.md, findings.json} (ASCII charts acceptable; no external libs required).</li>\n<li>CLI:<ul>\n<li>mfg:spc:analyze --op OP-200 --window 50</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Yield, Defects, and COQ</li>\n</ol>\n<ul>\n<li>New: /mfg/yield.py</li>\n<li>Compute first-pass yield (FPY), rolled throughput yield (RTY), top defects Pareto by station/cause.</li>\n<li>New: /mfg/coq.py</li>\n<li>Cost of Quality buckets: Prevention, Appraisal, Internal Failure, External Failure from fixtures/ledger.</li>\n<li>Outputs: /artifacts/mfg/yield/{summary.md, pareto.csv}, /artifacts/mfg/coq/{coq.md, coq.csv}.</li>\n<li>CLI:<ul>\n<li>mfg:yield --period 2025-09</li>\n<li>mfg:coq --period 2025-Q3</li>\n</ul>\n</li>\n</ul>\n<ol start=\"7\">\n<li>Build Plan &amp; Kitting (Deterministic MRP-lite)</li>\n</ol>\n<ul>\n<li>New: /mfg/mrp.py</li>\n<li>Inputs: demand (from S&amp;OP, Phase 23), inventory on-hand, open POs (fixtures).</li>\n<li>Explosion → netting → planned orders by lead time; generate kitting lists.</li>\n<li>Artifacts: /artifacts/mfg/mrp/{plan.json, kitting_{wo}.csv}.</li>\n<li>CLI:<ul>\n<li>mfg:mrp --demand artifacts/sop/allocations.csv --inventory fixtures/mfg/inventory.csv --pos fixtures/mfg/open_pos.csv</li>\n</ul>\n</li>\n</ul>\n<ol start=\"8\">\n<li>Governance &amp; Safety</li>\n</ol>\n<ul>\n<li>Duty-of-care gates:<ul>\n<li>Block plm:eco:release if SPC has critical findings on affected ops (DUTY_SPC_UNSTABLE).</li>\n<li>Block mfg:wi:render for release if routing &amp; BOM revs mismatch (DUTY_REV_MISMATCH).</li>\n</ul>\n</li>\n<li>Policy pack:<ul>\n<li>Require dual approval on ECOs with risk=high.</li>\n<li>Enforce supplier dual-source for critical items when BOM changes (tie-in to Phase 23 procurement).</li>\n</ul>\n</li>\n</ul>\n<ol start=\"9\">\n<li>Lake &amp; Contracts</li>\n</ol>\n<ul>\n<li>New tables: plm_items, plm_boms, plm_changes, mfg_routings, mfg_wi, mfg_spc, mfg_yield, mfg_mrp, mfg_coq.</li>\n<li>Add schemas under /contracts/schemas/ and validate before writes.</li>\n<li>Emit metrics: plm_items_written, plm_changes_released, routing_cap_checked, wi_rendered, spc_findings, yield_reported, mrp_planned, coq_built.</li>\n</ul>\n<ol start=\"10\">\n<li>Docs &amp; Samples</li>\n</ol>\n<ul>\n<li>Fixtures:<ul>\n<li>fixtures/plm/items/<em>.csv, fixtures/plm/boms/</em>.csv</li>\n<li>fixtures/mfg/work_centers.csv, fixtures/mfg/routings/<em>.yaml, fixtures/mfg/spc/</em>.csv, fixtures/mfg/inventory.csv, fixtures/mfg/open_pos.csv</li>\n</ul>\n</li>\n<li>Docs:<ul>\n<li>/docs/plm.md (BOMs, ECO flow)</li>\n<li>/docs/mfg-routing.md (work centers, capacity, WI)</li>\n<li>/docs/spc-yield.md (SPC rules, FPY/RTY)</li>\n<li>/docs/mrp-lite.md (planning &amp; kitting)</li>\n<li>README: “PLM &amp; Manufacturing Ops” quickstart.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"11\">\n<li>Tests &amp; Quality (≥80% coverage)</li>\n</ol>\n<ul>\n<li>tests/test_bom.py (explode/where-used)</li>\n<li>tests/test_eco.py (impact calc, approvals, gate blocks)</li>\n<li>tests/test_routing_cap.py (throughput &amp; cost math)</li>\n<li>tests/test_wi.py (revision locks)</li>\n<li>tests/test_spc.py (rule detections)</li>\n<li>tests/test_yield_coq.py (FPY/RTY, COQ rollups)</li>\n<li>tests/test_mrp.py (netting, lead-time offset)</li>\n<li>Contract validation tests for all new lake tables.</li>\n</ul>\n<p><strong>Demo sequence (print expected output at end)</strong></p>\n<ol>\n<li>python -m cli.console plm:items:load --dir fixtures/plm/items &amp;&amp; python -m cli.console plm:bom:load --dir fixtures/plm/boms  </li>\n<li>python -m cli.console plm:bom:explode --item PROD-100 --rev A --level 3  </li>\n<li>python -m cli.console plm:eco:new --item PROD-100 --from A --to B --reason &quot;Connector change&quot; &amp;&amp; python -m cli.console plm:eco:impact --id ECO-001  </li>\n<li>python -m cli.console mfg:wc:load --file fixtures/mfg/work_centers.csv &amp;&amp; python -m cli.console mfg:routing:load --dir fixtures/mfg/routings &amp;&amp; python -m cli.console mfg:routing:capcheck --item PROD-100 --rev B --qty 1000  </li>\n<li>python -m cli.console mfg:wi:render --item PROD-100 --rev B  </li>\n<li>python -m cli.console mfg:spc:analyze --op OP-200 --window 50 &amp;&amp; python -m cli.console mfg:yield --period 2025-09  </li>\n<li>python -m cli.console mfg:mrp --demand artifacts/sop/allocations.csv --inventory fixtures/mfg/inventory.csv --pos fixtures/mfg/open_pos.csv  </li>\n<li>python -m cli.console mfg:coq --period 2025-Q3</li>\n</ol>\n<p><strong>Implementation notes</strong></p>\n<ul>\n<li>Deterministic calculations everywhere; fixed control limits (calc from fixtures) and stable sorting.</li>\n<li>No external plotting libraries required; ASCII charts or inline HTML are fine.</li>\n<li>Reuse existing storage, signing, lineage, approvals, duty-of-care, and lake I/O.</li>\n<li>Keep tables phrases/numbers only; narrative explanations live in .md outputs.</li>\n</ul>\n<p>JSON Schema (keeps prompts uniform)</p>\n<p>/static/schemas/codex_prompt.schema.json</p>\n<p>{\n  &quot;$schema&quot;: &quot;<a href=\"https://json-schema.org/draft/2020-12/schema\">https://json-schema.org/draft/2020-12/schema</a>&quot;,\n  &quot;title&quot;: &quot;CodexPrompt&quot;,\n  &quot;type&quot;: &quot;object&quot;,\n  &quot;required&quot;: [&quot;type&quot;,&quot;id&quot;,&quot;slug&quot;,&quot;title&quot;,&quot;summary&quot;,&quot;tags&quot;,&quot;updated&quot;,&quot;version&quot;,&quot;copy_filename&quot;],\n  &quot;properties&quot;: {\n    &quot;type&quot;: {&quot;const&quot;: &quot;codex-prompt&quot;},\n    &quot;id&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;slug&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;title&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;summary&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;owner&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;tags&quot;: {&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;type&quot;:&quot;string&quot;}},\n    &quot;model_hint&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;temperature&quot;: {&quot;type&quot;:&quot;number&quot;},\n    &quot;updated&quot;: {&quot;type&quot;:&quot;string&quot;,&quot;format&quot;:&quot;date&quot;},\n    &quot;version&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;canonical_repo&quot;: {&quot;type&quot;:&quot;string&quot;},\n    &quot;copy_filename&quot;: {&quot;type&quot;:&quot;string&quot;}\n  }\n}</p>\n<p>Validate at build time (e.g., a tiny script that reads frontmatter → JSON → Ajv / Python jsonschema).</p>\n"
}