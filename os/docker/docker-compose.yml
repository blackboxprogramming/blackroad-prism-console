version: "3.9"
name: blackroad

x-common-env: &common_env
  TZ: ${TZ}
  REDIS_URL: ${REDIS_URL}

services:
  reverse-proxy:
    image: traefik:v3.0
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../tls/traefik-dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ../tls/certs:/certs:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  blackroad-api:
    build:
      context: ../..
      dockerfile: ./os/docker/services/blackroad-api/Dockerfile
    environment:
      <<: *common_env
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.services.api.loadbalancer.server.port=8000
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 12
    restart: unless-stopped

  autopal:
    build:
      context: ../..
      dockerfile: ./os/docker/services/autopal/Dockerfile
    environment:
      <<: *common_env
      BR_API_KEY: ${BR_API_KEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.autopal.rule=PathPrefix(`/autopal`)
      - traefik.http.routers.autopal.entrypoints=websecure
      - traefik.http.services.autopal.loadbalancer.server.port=8001
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:8001/health"]
      interval: 10s
      timeout: 3s
      retries: 12
    restart: unless-stopped

  aicodecloud:
    build:
      context: ../..
      dockerfile: ./os/docker/services/aicodecloud/Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.aicode.rule=PathPrefix(`/aicode`)
      - traefik.http.routers.aicode.entrypoints=websecure
      - traefik.http.services.aicode.loadbalancer.server.port=5000
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:5000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 12
    restart: unless-stopped

  pi-ops:
    build:
      context: ../..
      dockerfile: ./os/docker/services/pi-ops/Dockerfile
    environment:
      <<: *common_env
      MQTT_URL: ${MQTT_URL}
    depends_on:
      - mqtt
    labels:
      - traefik.enable=true
      - traefik.http.routers.piops.rule=PathPrefix(`/pi-ops`)
      - traefik.http.routers.piops.entrypoints=websecure
      - traefik.http.services.piops.loadbalancer.server.port=7000
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:7000/health"]
      interval: 10s
      timeout: 3s
      retries: 12
    restart: unless-stopped

  var-www:
    build:
      context: ../..
      dockerfile: ./os/docker/services/var-www/Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=PathPrefix(`/`)
      - traefik.http.routers.web.entrypoints=websecure
      - traefik.http.services.web.loadbalancer.server.port=9000
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/health"]
      interval: 10s
      timeout: 3s
      retries: 12
    restart: unless-stopped

  discord-bot:
    build:
      context: ../..
      dockerfile: ./os/docker/services/discord-bot/Dockerfile
    environment:
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
    healthcheck:
      test: ["CMD","python","/app/healthcheck.py"]
      interval: 20s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  mqtt:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
    volumes:
      - mosq-data:/mosquitto/data
      - mosq-conf:/mosquitto/config
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower:1.7.1
    command:
      - "--cleanup"
      - "--interval"
      - "3600"
    environment:
      WATCHTOWER_SCHEDULE: "${WATCHTOWER_SCHEDULE}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    profiles:
      - watchtower

  cloudflared:
    image: cloudflare/cloudflared:2025.2.0
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    restart: unless-stopped
    profiles:
      - tunnel

volumes:
  mosq-data:
  mosq-conf:
