#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCKER_DIR="${SCRIPT_DIR}/docker"
COMPOSE="docker compose"
SYSTEMD_SERVICE="blackroad-compose.service"
KIOSK_SERVICE="blackroad-kiosk.service"
STACK_NAME="blackroad"

usage() {
  cat <<USAGE
Usage: brctl <command> [args]

Commands:
  up                Start the docker compose stack
  down              Stop the stack
  restart           Restart the stack
  ps                Show container status
  logs [service]    Tail logs (defaults to all)
  status            Summarise stack and systemd status
  health            Query all HTTP health endpoints via Traefik
  doctor            Run environment diagnostics
  info              Show version, image tags, and environment info
  kiosk on|off      Enable/disable kiosk user service
  version           Show release channel, current tag, and last-good
  channel           Switch between stable and edge channels
  upgrade           Upgrade to the latest tagged release
  rollback          Roll back to the last-known-good release
  help              Show this message
USAGE
}

require_compose() {
  if [[ ! -d "${DOCKER_DIR}" ]]; then
    echo "Docker directory not found at ${DOCKER_DIR}" >&2
    exit 1
  fi
}

compose_cmd() {
  (cd "${DOCKER_DIR}" && ${COMPOSE} "$@")
}

cmd_up() {
  require_compose
  compose_cmd up -d --remove-orphans
}

cmd_down() {
  require_compose
  compose_cmd down
}

cmd_restart() {
  cmd_down
  cmd_up
}

cmd_ps() {
  require_compose
  compose_cmd ps
}

cmd_logs() {
  require_compose
  if [[ $# -gt 0 ]]; then
    compose_cmd logs -f "$1"
  else
    compose_cmd logs -f
  fi
}

cmd_status() {
  printf "Systemd status (sudo may be required)\n"
  systemctl --no-pager status "${SYSTEMD_SERVICE}" 2>/dev/null || echo "systemd status unavailable"
  echo
  require_compose
  compose_cmd ps
}

cmd_health() {
  HOST="${BLACKROAD_HOST:-localhost}"
  declare -a endpoints=(
    "http://${HOST}/api/health"
    "http://${HOST}/autopal/health"
    "http://${HOST}/aicode/api/health"
    "http://${HOST}/pi-ops/health"
    "http://${HOST}/health"
  )

  for endpoint in "${endpoints[@]}"; do
    echo "Checking ${endpoint}"
    if curl -fsS "${endpoint}" >/tmp/brctl_health 2>&1; then
      echo "  OK"
    else
      echo "  FAILED"
    fi
  done
}

cmd_doctor() {
  echo "Docker: $(docker --version 2>/dev/null || echo missing)"
  echo "Docker Compose: $(docker compose version 2>/dev/null || echo missing)"
  echo "Disk usage:"
  df -h /
  echo
  echo "cgroup memory:"
  if [[ -f /proc/meminfo ]]; then
    grep -i memtotal /proc/meminfo
  fi
  echo
  echo "Checking required ports"
  for port in 80 443 1883; do
    if ss -tulpn | grep -q ":${port} "; then
      echo "  Port ${port}: in use"
    else
      echo "  Port ${port}: available"
    fi
  done
  echo
  cmd_health || true
}

cmd_info() {
  require_compose
  echo "Stack: ${STACK_NAME}"
  echo "Repository: $(git -C "${SCRIPT_DIR}/.." rev-parse --short HEAD 2>/dev/null || echo unknown)"
  echo "Environment file:"
  if [[ -f "${DOCKER_DIR}/.env" ]]; then
    grep -v '^#' "${DOCKER_DIR}/.env"
  else
    echo "  Missing .env (copy from .env.example)"
  fi
  echo
  compose_cmd images
}

cmd_version() {
  echo "Channel: $(cat /opt/blackroad/os/releases/channel 2>/dev/null || echo stable)"
  echo "Current: $(git -C /opt/blackroad describe --tags --abbrev=0 2>/dev/null || git -C /opt/blackroad rev-parse --short HEAD)"
  echo "LastGood: $(cat /opt/blackroad/os/releases/last-good 2>/dev/null || echo none)"
}

cmd_channel() {
  case "${1:-}" in
    stable|edge)
      echo "$1" | sudo tee /opt/blackroad/os/releases/channel >/dev/null
      echo "Channel set to $1"
      ;;
    *)
      echo "Usage: brctl channel {stable|edge}" >&2
      return 1
      ;;
  esac
}

cmd_kiosk() {
  if [[ $# -ne 1 ]]; then
    echo "Usage: brctl kiosk on|off" >&2
    exit 1
  fi
  case "$1" in
    on)
      systemctl --user enable --now "${KIOSK_SERVICE}" || echo "Enable kiosk user service manually."
      ;;
    off)
      systemctl --user disable --now "${KIOSK_SERVICE}" || echo "Disable kiosk user service manually."
      ;;
    *)
      echo "Usage: brctl kiosk on|off" >&2
      exit 1
      ;; 
  esac
}

cmd_upgrade() {
  sudo /opt/blackroad/os/upgrade/upgrade.sh
}

cmd_rollback() {
  sudo /opt/blackroad/os/upgrade/rollback.sh
}

main() {
  if [[ $# -lt 1 ]]; then
    usage
    exit 1
  fi

  cmd="$1"
  shift || true

  case "$cmd" in
    up) cmd_up "$@" ;;
    down) cmd_down "$@" ;;
    restart) cmd_restart "$@" ;;
    ps) cmd_ps "$@" ;;
    logs) cmd_logs "$@" ;;
    status) cmd_status "$@" ;;
    health) cmd_health "$@" ;;
    doctor) cmd_doctor "$@" ;;
    info) cmd_info "$@" ;;
    version) cmd_version "$@" ;;
    channel) cmd_channel "$@" ;;
    kiosk) cmd_kiosk "$@" ;;
    upgrade) cmd_upgrade "$@" ;;
<<<<<<< main
    metrics)
      echo "Grafana:    http://$(hostname -I | awk '{print $1}')/grafana  (${GRAFANA_ADMIN_USER:-admin}/${GRAFANA_ADMIN_PASSWORD:-admin})"
      echo "Loki:       internal at http://loki:3100"
      echo "Promtail:   scrapes docker logs via docker_sd"
      echo
      echo "Sample LogQL:"
      echo '  {job="docker-logs"} |= "ERROR"'
      echo '  {service="blackroad-api"} | json | line_format "{{.message}}"'
      ;;
=======
    rollback) cmd_rollback "$@" ;;
>>>>>>> origin/codex/add-ota-update-flow-with-rollback
    help|-h|--help) usage ;;
    *)
      echo "Unknown command: ${cmd}" >&2
      usage
      exit 1
      ;;
  esac
}

main "$@"
ROOT="/opt/blackroad/os/docker"

dc () { (cd "$ROOT" && docker compose "$@"); }

case "${1:-}" in
  up)        dc up -d;;
  down)      dc down;;
  restart)   dc down && dc up -d;;
  ps)        dc ps;;
  logs)      shift; dc logs -f "${@:-}";;
  status)    dc ps && echo && curl -fsS http://localhost/health || true;;
  health)    bash /opt/blackroad/os/tests/smoke.sh;;
  doctor)
    echo "== Docker =="; docker --version; docker info | sed -n '1,30p'
    echo "== Compose =="; docker compose version
    echo "== Ports =="; ss -lntp | grep -E ':80 |:443 |:5000|:7000|:8000|:8001|:9000' || true
    ;;
  metrics)
    echo "Grafana:    http://$(hostname -I | awk '{print $1}')/grafana  (${GRAFANA_ADMIN_USER:-admin}/${GRAFANA_ADMIN_PASSWORD:-admin})"
    echo "Loki:       internal at http://loki:3100"
    echo "Promtail:   scrapes docker logs via docker_sd"
    echo
    echo "Sample LogQL:"
    echo '  {job="docker-logs"} |= "ERROR"'
    echo '  {service="blackroad-api"} | json | line_format "{{.message}}"'
    ;;
  "kiosk") shift
    case "${1:-}" in
      on)  systemctl --user enable --now blackroad-kiosk.service || true ;;
      off) systemctl --user disable --now blackroad-kiosk.service || true ;;
      *)   echo "Usage: brctl kiosk on|off" ;;
    esac
    ;;
<<<<<<< main
  upgrade)   dc pull && dc up -d;;
  *)         echo "Usage: brctl {up|down|restart|ps|logs [svc]|status|health|doctor|metrics|kiosk on|off|upgrade}";;
=======
  version)   cmd_version ;;
  channel)   shift; cmd_channel "${1:-}" ;;
  upgrade)   cmd_upgrade ;;
  rollback)  cmd_rollback ;;
  *)         echo "Usage: brctl {up|down|restart|ps|logs [svc]|status|health|doctor|kiosk on|off|version|channel {stable|edge}|upgrade|rollback}";;
>>>>>>> origin/codex/add-ota-update-flow-with-rollback
esac
