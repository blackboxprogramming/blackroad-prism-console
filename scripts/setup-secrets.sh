#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
EXAMPLE_FILE="${REPO_ROOT}/.env.example"
TARGET_FILE="${REPO_ROOT}/.env"

if [[ ! -f "${EXAMPLE_FILE}" ]]; then
  echo "Error: ${EXAMPLE_FILE} not found. Run from repository root." >&2
  exit 1
fi

declare -A existing_values
if [[ -f "${TARGET_FILE}" ]]; then
  while IFS='=' read -r raw_key raw_value; do
    key="${raw_key%%[[:space:]]*}"
    [[ -z "${key}" ]] && continue
    [[ "${key}" =~ ^# ]] && continue
    value="${raw_value}"
    value="${value%%$'\r'*}"
    value="${value#"${value%%[![:space:]]*}"}"
    value="${value%"${value##*[![:space:]]}"}"
    if [[ ${value} == "*" && ${value} == *" ]]; then
      value="${value%"}"
      value="${value#"}"
    fi
    existing_values["${key}"]="${value}"
  done < <(grep -E '^[A-Za-z0-9_]+=\S*' "${TARGET_FILE}" || true)
fi

function current_value() {
  local name="$1"
  if [[ -n "${existing_values[$name]:-}" ]]; then
    printf '%s' "${existing_values[$name]}"
    return 0
  fi
  if [[ -n "${!name:-}" ]]; then
    printf '%s' "${!name}"
    return 0
  fi
  return 1
}

function validate_input() {
  local name="$1"
  local value="$2"
  case "$name" in
    PORT|UNITY_EXPORTER_PORT|DEPLOY_PORT)
      [[ "$value" =~ ^[0-9]+$ ]] || { echo "  -> Value must be an integer." >&2; return 1; }
      ;;
    FLAGS_MAX_AGE_MS|*_CENTS|*_MS)
      [[ "$value" =~ ^[0-9]+$ ]] || { echo "  -> Value must be an integer." >&2; return 1; }
      ;;
    ALLOW_SHELL|BILLING_DISABLE|DEBUG_MODE|DEBUG_PROBES|BYPASS_LOGIN|LUCIDIA_USE_MODEL)
      [[ "$value" =~ ^(true|false|0|1)$ ]] || { echo "  -> Enter true/false or 0/1." >&2; return 1; }
      ;;
    ALLOW_ORIGINS)
      [[ "$value" =~ [^[:space:],] ]] || { echo "  -> Provide at least one origin." >&2; return 1; }
      ;;
  esac
  return 0
}

function normalise_bool() {
  local value="$1"
  case "$value" in
    1|true|TRUE|True)
      printf 'true'
      ;;
    0|false|FALSE|False)
      printf 'false'
      ;;
    *)
      printf '%s' "$value"
      ;;
  esac
}

declare -A new_values
missing_required=()
missing_optional=()

while IFS= read -r line || [[ -n "$line" ]]; do
  trimmed="${line#${line%%[![:space:]]*}}"
  if [[ -z "$trimmed" || "$trimmed" == \#* ]]; then
    new_values["__COPY_${#new_values[@]}__"]="$line"
    continue
  fi
  name="${line%%=*}"
  desc="${line#*=}"
  optional=false
  if [[ "$desc" == "(optional)"* ]]; then
    optional=true
    desc="${desc#(optional)}"
    desc="${desc# }"
  fi
  printf '\n%s' "Configuring ${name}: ${desc}" >&2
  value=""
  if current_value "$name" > /dev/null; then
    value="$(current_value "$name")"
    printf '\n  Found existing value for %s. Leave blank to keep.\n' "$name" >&2
  fi
  while true; do
    read -r -p "  Enter value${optional:+ (optional)}: " input
    if [[ -z "$input" ]]; then
      if [[ -n "$value" ]]; then
        break
      fi
      if [[ "$optional" == true ]]; then
        break
      fi
      echo "  -> This value is required." >&2
      continue
    fi
    if ! validate_input "$name" "$input"; then
      continue
    fi
    if [[ "$name" =~ ^(ALLOW_SHELL|BILLING_DISABLE|DEBUG_MODE|DEBUG_PROBES|BYPASS_LOGIN|LUCIDIA_USE_MODEL)$ ]]; then
      input="$(normalise_bool "$input")"
    fi
    value="$input"
    break
  done

  if [[ -z "$value" ]]; then
    if [[ "$optional" == true ]]; then
      missing_optional+=("$name")
    else
      missing_required+=("$name")
    fi
    continue
  fi
  new_values["$name"]="$value"

done < "${EXAMPLE_FILE}"

TMP_FILE="${TARGET_FILE}.tmp"
{
  echo "# Generated by scripts/setup-secrets.sh on $(date -u)"
  while IFS= read -r line || [[ -n "$line" ]]; do
    trimmed="${line#${line%%[![:space:]]*}}"
    if [[ -z "$trimmed" || "$trimmed" == \#* ]]; then
      echo "$line"
      continue
    fi
    name="${line%%=*}"
    desc="${line#*=}"
    value="${new_values[$name]:-}"
    if [[ -z "$value" ]]; then
      echo "# ${name} is not set (${desc})"
      continue
    fi
    escaped="${value//\\/\\\\}"
    escaped="${escaped//"/\\"}"
    printf '%s="%s"\n' "$name" "$escaped"
  done < "${EXAMPLE_FILE}"
} > "${TMP_FILE}"

mv "${TMP_FILE}" "${TARGET_FILE}"
chmod 600 "${TARGET_FILE}"

echo
if ((${#missing_required[@]})); then
  echo "Missing required variables: ${missing_required[*]}" >&2
else
  echo "All required variables configured." >&2
fi
if ((${#missing_optional[@]})); then
  echo "Optional variables left unset: ${missing_optional[*]}" >&2
fi

echo "Wrote ${TARGET_FILE}" >&2
